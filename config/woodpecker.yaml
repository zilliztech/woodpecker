# Licensed to the LF AI & Data foundation under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is used to configure Woodpecker service.

woodpecker:
  # Configuration of Woodpecker metadata storage.
  meta:
    type: etcd # Type of the meta data storage, currently only etcd is supported.
    prefix: woodpecker # Root prefix of the key to where Woodpecker stores data in etcd.
  # Configuration of Woodpecker Client.
  client:
    segmentAppend:
      queueSize: 10000 # Maximum number of queued segment append requests, default is 10000
      maxRetries: 3 # Maximum number of retries for segment append operations
    segmentRollingPolicy:
      maxSize: 256000000 # Maximum segment size in bytes, default is 2GB. Increase this value for high write throughput scenarios to minimize frequent segment rolling.
      maxInterval: 600 # Maximum interval between two segments in seconds, default is 10 minutes
      maxBlocks: 1000 # Maximum number of blocks in a segment, default is 1000
    auditor:
      maxInterval: 10 # Maximum interval between two auditing operations in seconds, default is 10 seconds
    # Advanced Quorum Configuration for Service storage backend mode
    # This configuration supports complex node selection strategies and buffer pools
    quorum:
      # Quorum Node Discovery Mode: How to discover quorum nodes
      # Valid values: [active, passive]
      # - active: Actively request and retrieve nodes when selection is needed
      # - passive: Passively monitor cluster node status and maintain local node list
      quorumNodeDiscoveryMode: active
      # Quorum Buffer Pools: Define groups of nodes for different purposes
      quorumBufferPools:
        - name: default-region-pool # Name of the default region pool
          seeds: [ ] # List of node addresses that can be used for quorum operations
      # Quorum Selection Strategy: How to select nodes for quorum operations
      quorumSelectStrategy:
        # Affinity Mode: How strictly to apply node selection rules
        # - soft: Prefer rules but allow fallback if requirements can't be met
        # - hard: Strictly enforce rules, fail if requirements can't be met
        affinityMode: soft
        # Number of replicas in the quorum ensemble
        # This determines the total number of nodes in a write operation
        # Valid values: [3,5]
        replicas: 3
        # Node selection strategy
        # - random: nodes are selected randomly
        # - single-az-single-rg: All nodes in same availability zone and resource group
        # - single-az-multi-rg: Same availability zone, multiple resource groups
        # - multi-az-single-rg: Multiple availability zones, single resource group
        # - multi-az-multi-rg: Multiple availability zones and resource groups
        # - cross-region: Nodes across different regions for maximum durability
        # - custom: Use custom expressions defined below
        strategy: random
        # Custom expressions for node selection (only used when strategy is 'custom')
        customPlacement:
        #  - name: replica-1
        #    region: "default-region-pool"
        #    az: "az-1"
        #    resourceGroup: "rg.*"
        #  - name: replica-2
        #    region: "default-region-pool"
        #    az: "az-2"
        #    resourceGroup: "rg.*"
        #  - name: replica-3
        #    region: "default-region-pool"
        #    az: "az.*"
        #    resourceGroup: "rg.*"
  # Configuration of Woodpecker LogStore Server.
  logstore:
    segmentSyncPolicy:
      maxInterval: 200 # Maximum interval between two sync operations in milliseconds
      maxIntervalForLocalStorage: 10 # Maximum interval between sync operations for local storage backend, in milliseconds
      maxEntries: 10000 # Maximum entries number of write buffer
      maxBytes: 256000000 # Maximum size of write buffer in bytes
      maxFlushRetries: 5 # Maximum number of retries for sync operations
      retryInterval: 1000 # Maximum interval between two retries in milliseconds
      maxFlushSize: 2000000 # Maximum size of a block in bytes to flush, default is 2MB, which is the best practice for cloud storage
      maxFlushThreads: 32 # Maximum number of threads to flush data
    segmentCompactionPolicy:
      maxBytes: 2000000 # Maximum size of a merged block in bytes after compact, default is 2M
      maxParallelUploads: 4 # Maximum number of parallel upload threads for compaction, default is 4
      maxParallelReads: 8 # Maximum number of parallel read threads for compaction, default is 8
    segmentReadPolicy:
      maxBatchSize: 16000000 # Maximum size of a batch in bytes, default is 16MB
      maxFetchThreads: 32 # Maximum number of threads to fetch data, default is 32
  # Configuration of Woodpecker Storage Backend.
  storage:
    # The default value is "default", which configures Woodpecker to use MinIO-compatible storage.
    # Valid values: [default, minio, local, service]
    type: minio
    rootPath: /var/lib/woodpecker # Root path to the log data files.

# Configures the system log output.
log:
  # Woodpecker log level. Option: debug, info, warn, error, panic, and fatal.
  # It is recommended to use debug level under test and development environments, and info level in production environment.
  level: info
  file:
    # Root path to the log files.
    # The default value is set empty, indicating to output log files to standard output (stdout) and standard error (stderr).
    # If this parameter is set to a valid local path, Woodpecker writes and stores log files in this path.
    # Set this parameter as the path that you have permission to write.
    rootPath:
    maxSize: 300 # The maximum size of a log file, unit: MB.
    maxAge: 10 # The maximum retention time before a log file is automatically cleared, unit: day. The minimum value is 1.
    maxBackups: 20 # The maximum number of log files to back up, unit: day. The minimum value is 1.
  format: text # Woodpecker log format. Option: text and JSON
  stdout: true # Stdout enable or not

# Trace configuration
trace:
  # trace exporter type, default is stdout,
  # optional values: ['noop','stdout', 'jaeger', 'otlp']
  exporter: noop
  # fraction of traceID based sampler,
  # optional values: [0, 1]
  # Fractions >= 1 will always sample. Fractions < 0 are treated as zero.
  sampleFraction: 1
  jaeger:
    url:  # when exporter is jaeger should set the jaeger's URL
  otlp:
    endpoint: 127.0.0.1:4317 # example: "127.0.0.1:4317" for grpc, "127.0.0.1:4318" for http
    method: grpc  # otlp export method, acceptable values: ["grpc", "http"],  using "grpc" by default
    secure: false
  initTimeoutSeconds: 10 # segcore initialization timeout in seconds, preventing otlp grpc hangs forever

# Related configuration of etcd, used to store Woodpecker metadata & service discovery.
etcd:
  # Endpoints used to access etcd service. You can change this parameter as the endpoints of your own etcd cluster.
  endpoints:
    - localhost:2379
  # Root prefix of the key to where Woodpecker stores data in etcd.
  # It is recommended to change this parameter before starting Woodpecker for the first time.
  # To share an etcd instance among multiple Woodpecker instances, consider changing this to a different value for each Woodpecker instance before you start them.
  # Set an easy-to-identify root path for Woodpecker if etcd service already exists.
  # Changing this for an already running Woodpecker instance may result in failures to read legacy data.
  rootPath: by-dev
  # Sub-prefix of the key to where Woodpecker stores metadata-related information in etcd.
  # Caution: Changing this parameter after using Woodpecker for a period of time will affect your access to old data.
  # It is recommended to change this parameter before starting Woodpecker for the first time.
  metaSubPath: meta
  # Sub-prefix of the key to where Woodpecker stores timestamps in etcd.
  # Caution: Changing this parameter after using Woodpecker for a period of time will affect your access to old data.
  # It is recommended not to change this parameter if there is no specific reason.
  kvSubPath: kv
  log:
    level: info # Only supports debug, info, warn, error, panic, or fatal. Default 'info'.
    # path is one of:
    #  - "default" as os.Stderr,
    #  - "stderr" as os.Stderr,
    #  - "stdout" as os.Stdout,
    #  - file path to append server logs to.
    # please adjust in embedded woodpecker: /tmp/woodpecker/logs/etcd.log
    path: stdout
  ssl:
    enabled: false # Whether to support ETCD secure connection mode
    tlsCert: /path/to/etcd-client.pem # path to your cert file
    tlsKey: /path/to/etcd-client-key.pem # path to your key file
    tlsCACert: /path/to/ca.pem # path to your CACert file
    # TLS min version
    # Optional values: 1.0, 1.1, 1.2, 1.3ã€‚
    # We recommend using version 1.2 and above.
    tlsMinVersion: 1.3
  requestTimeout: 10000 # Etcd operation timeout in milliseconds
  use:
    embed: false # Whether to enable embedded Etcd (an in-process EtcdServer).
  data:
    dir: default.etcd # Embedded Etcd only. please adjust in embedded woodpecker: /tmp/woodpecker/etcdData/
  auth:
    enabled: false # Whether to enable authentication
    userName:  # username for etcd authentication
    password:  # password for etcd authentication

# Related configuration of MinIO/S3/GCS or any other service supports S3 API, which is responsible for data persistence for Woodpecker.
# We refer to the storage service as MinIO/S3 in the following description for simplicity.
minio:
  # IP address of MinIO or S3 service.
  # Environment variable: MINIO_ADDRESS
  # minio.address and minio.port together generate the valid access to MinIO or S3 service.
  # MinIO preferentially acquires the valid IP address from the environment variable MINIO_ADDRESS when Woodpecker is started.
  # Default value applies when MinIO or S3 is running on the same network with Woodpecker.
  address: localhost
  port: 9000 # Port of MinIO or S3 service.
  # Access key ID that MinIO or S3 issues to user for authorized access.
  # Environment variable: MINIO_ACCESS_KEY_ID or minio.accessKeyID
  # minio.accessKeyID and minio.secretAccessKey together are used for identity authentication to access the MinIO or S3 service.
  # This configuration must be set identical to the environment variable MINIO_ACCESS_KEY_ID, which is necessary for starting MinIO or S3.
  # The default value applies to MinIO or S3 service that started with the default docker-compose.yml file.
  accessKeyID: minioadmin
  # Secret key used to encrypt the signature string and verify the signature string on server. It must be kept strictly confidential and accessible only to the MinIO or S3 server and users.
  # Environment variable: MINIO_SECRET_ACCESS_KEY or minio.secretAccessKey
  # minio.accessKeyID and minio.secretAccessKey together are used for identity authentication to access the MinIO or S3 service.
  # This configuration must be set identical to the environment variable MINIO_SECRET_ACCESS_KEY, which is necessary for starting MinIO or S3.
  # The default value applies to MinIO or S3 service that started with the default docker-compose.yml file.
  secretAccessKey: minioadmin
  useSSL: false # Switch value to control if to access the MinIO or S3 service through SSL.
  ssl:
    tlsCACert: /path/to/public.crt # path to your CACert file
  # Name of the bucket where Woodpecker stores data in MinIO or S3.
  # Woodpecker does not support storing data in multiple buckets.
  # Bucket with this name will be created if it does not exist. If the bucket already exists and is accessible, it will be used directly. Otherwise, there will be an error.
  # To share an MinIO instance among multiple Woodpecker instances, consider changing this to a different value for each Woodpecker instance before you start them.
  # The data will be stored in the local Docker if Docker is used to start the MinIO service locally. Ensure that there is sufficient storage space.
  # A bucket name is globally unique in one MinIO or S3 instance.
  bucketName: a-bucket
  # Root prefix of the key to where Woodpecker stores data in MinIO or S3.
  # It is recommended to change this parameter before starting Woodpecker for the first time.
  # To share an MinIO instance among multiple Woodpecker instances, consider changing this to a different value for each Woodpecker instance before you start them.
  # Set an easy-to-identify root key prefix for Woodpecker if etcd service already exists.
  # Changing this for an already running Woodpecker instance may result in failures to read legacy data.
  rootPath: files
  # Whether to useIAM role to access S3/GCS instead of access/secret keys
  # For more information, refer to
  # aws: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html
  # gcp: https://cloud.google.com/storage/docs/access-control/iam
  # aliyun (ack): https://www.alibabacloud.com/help/en/container-service-for-kubernetes/latest/use-rrsa-to-enforce-access-control
  # aliyun (ecs): https://www.alibabacloud.com/help/en/elastic-compute-service/latest/attach-an-instance-ram-role
  useIAM: false
  # Cloud Provider of S3. Supports: "aws", "gcp", "aliyun".
  # Cloud Provider of Google Cloud Storage. Supports: "gcpnative".
  # You can use "aws" for other cloud provider supports S3 API with signature v4, e.g.: minio
  # You can use "gcp" for other cloud provider supports S3 API with signature v2
  # You can use "aliyun" for other cloud provider uses virtual host style bucket
  # You can use "gcpnative" for the Google Cloud Platform provider. Uses service account credentials
  # for authentication.
  # When useIAM enabled, only "aws", "gcp", "aliyun" is supported for now
  cloudProvider: aws
  # The JSON content contains the gcs service account credentials.
  # Used only for the "gcpnative" cloud provider.
  gcpCredentialJSON:
  # Custom endpoint for fetch IAM role credentials. when useIAM is true & cloudProvider is "aws".
  # Leave it empty if you want to use AWS default endpoint
  iamEndpoint:
  logLevel: fatal # Log level for aws sdk log. Supported level:  off, fatal, error, warn, info, debug, trace
  region:  # Specify minio storage system location region
  useVirtualHost: false # Whether use virtual host mode for bucket
  requestTimeoutMs: 10000 # minio timeout for request time in milliseconds
  # The maximum number of objects requested per batch in minio ListObjects rpc,
  # 0 means using oss client by default, decrease these configration if ListObjects timeout
  listObjectsMaxKeys: 0