// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_log_handle

import (
	context "context"

	meta "github.com/zilliztech/woodpecker/meta"
	log "github.com/zilliztech/woodpecker/woodpecker/log"

	mock "github.com/stretchr/testify/mock"

	segment "github.com/zilliztech/woodpecker/woodpecker/segment"
)

// LogHandle is an autogenerated mock type for the LogHandle type
type LogHandle struct {
	mock.Mock
}

type LogHandle_Expecter struct {
	mock *mock.Mock
}

func (_m *LogHandle) EXPECT() *LogHandle_Expecter {
	return &LogHandle_Expecter{mock: &_m.Mock}
}

// CheckAndSetSegmentTruncatedIfNeed provides a mock function with given fields: ctx
func (_m *LogHandle) CheckAndSetSegmentTruncatedIfNeed(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckAndSetSegmentTruncatedIfNeed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAndSetSegmentTruncatedIfNeed'
type LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call struct {
	*mock.Call
}

// CheckAndSetSegmentTruncatedIfNeed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) CheckAndSetSegmentTruncatedIfNeed(ctx interface{}) *LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call {
	return &LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call{Call: _e.mock.On("CheckAndSetSegmentTruncatedIfNeed", ctx)}
}

func (_c *LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call) Run(run func(ctx context.Context)) *LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call) Return(_a0 error) *LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call) RunAndReturn(run func(context.Context) error) *LogHandle_CheckAndSetSegmentTruncatedIfNeed_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *LogHandle) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogHandle_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type LogHandle_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) Close(ctx interface{}) *LogHandle_Close_Call {
	return &LogHandle_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *LogHandle_Close_Call) Run(run func(ctx context.Context)) *LogHandle_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_Close_Call) Return(_a0 error) *LogHandle_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_Close_Call) RunAndReturn(run func(context.Context) error) *LogHandle_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteAllActiveSegmentIfExists provides a mock function with given fields: ctx
func (_m *LogHandle) CompleteAllActiveSegmentIfExists(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CompleteAllActiveSegmentIfExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogHandle_CompleteAllActiveSegmentIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteAllActiveSegmentIfExists'
type LogHandle_CompleteAllActiveSegmentIfExists_Call struct {
	*mock.Call
}

// CompleteAllActiveSegmentIfExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) CompleteAllActiveSegmentIfExists(ctx interface{}) *LogHandle_CompleteAllActiveSegmentIfExists_Call {
	return &LogHandle_CompleteAllActiveSegmentIfExists_Call{Call: _e.mock.On("CompleteAllActiveSegmentIfExists", ctx)}
}

func (_c *LogHandle_CompleteAllActiveSegmentIfExists_Call) Run(run func(ctx context.Context)) *LogHandle_CompleteAllActiveSegmentIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_CompleteAllActiveSegmentIfExists_Call) Return(_a0 error) *LogHandle_CompleteAllActiveSegmentIfExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_CompleteAllActiveSegmentIfExists_Call) RunAndReturn(run func(context.Context) error) *LogHandle_CompleteAllActiveSegmentIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentWritableSegmentHandle provides a mock function with given fields: ctx
func (_m *LogHandle) GetCurrentWritableSegmentHandle(ctx context.Context) segment.SegmentHandle {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentWritableSegmentHandle")
	}

	var r0 segment.SegmentHandle
	if rf, ok := ret.Get(0).(func(context.Context) segment.SegmentHandle); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(segment.SegmentHandle)
		}
	}

	return r0
}

// LogHandle_GetCurrentWritableSegmentHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentWritableSegmentHandle'
type LogHandle_GetCurrentWritableSegmentHandle_Call struct {
	*mock.Call
}

// GetCurrentWritableSegmentHandle is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) GetCurrentWritableSegmentHandle(ctx interface{}) *LogHandle_GetCurrentWritableSegmentHandle_Call {
	return &LogHandle_GetCurrentWritableSegmentHandle_Call{Call: _e.mock.On("GetCurrentWritableSegmentHandle", ctx)}
}

func (_c *LogHandle_GetCurrentWritableSegmentHandle_Call) Run(run func(ctx context.Context)) *LogHandle_GetCurrentWritableSegmentHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_GetCurrentWritableSegmentHandle_Call) Return(_a0 segment.SegmentHandle) *LogHandle_GetCurrentWritableSegmentHandle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_GetCurrentWritableSegmentHandle_Call) RunAndReturn(run func(context.Context) segment.SegmentHandle) *LogHandle_GetCurrentWritableSegmentHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetExistsReadonlySegmentHandle provides a mock function with given fields: ctx, segmentId
func (_m *LogHandle) GetExistsReadonlySegmentHandle(ctx context.Context, segmentId int64) (segment.SegmentHandle, error) {
	ret := _m.Called(ctx, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetExistsReadonlySegmentHandle")
	}

	var r0 segment.SegmentHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (segment.SegmentHandle, error)); ok {
		return rf(ctx, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) segment.SegmentHandle); ok {
		r0 = rf(ctx, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(segment.SegmentHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetExistsReadonlySegmentHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistsReadonlySegmentHandle'
type LogHandle_GetExistsReadonlySegmentHandle_Call struct {
	*mock.Call
}

// GetExistsReadonlySegmentHandle is a helper method to define mock.On call
//   - ctx context.Context
//   - segmentId int64
func (_e *LogHandle_Expecter) GetExistsReadonlySegmentHandle(ctx interface{}, segmentId interface{}) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	return &LogHandle_GetExistsReadonlySegmentHandle_Call{Call: _e.mock.On("GetExistsReadonlySegmentHandle", ctx, segmentId)}
}

func (_c *LogHandle_GetExistsReadonlySegmentHandle_Call) Run(run func(ctx context.Context, segmentId int64)) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *LogHandle_GetExistsReadonlySegmentHandle_Call) Return(_a0 segment.SegmentHandle, _a1 error) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetExistsReadonlySegmentHandle_Call) RunAndReturn(run func(context.Context, int64) (segment.SegmentHandle, error)) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with no fields
func (_m *LogHandle) GetId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LogHandle_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type LogHandle_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *LogHandle_Expecter) GetId() *LogHandle_GetId_Call {
	return &LogHandle_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *LogHandle_GetId_Call) Run(run func()) *LogHandle_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogHandle_GetId_Call) Return(_a0 int64) *LogHandle_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_GetId_Call) RunAndReturn(run func() int64) *LogHandle_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastRecordId provides a mock function with given fields: ctx
func (_m *LogHandle) GetLastRecordId(ctx context.Context) (*log.LogMessageId, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastRecordId")
	}

	var r0 *log.LogMessageId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*log.LogMessageId, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *log.LogMessageId); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log.LogMessageId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetLastRecordId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastRecordId'
type LogHandle_GetLastRecordId_Call struct {
	*mock.Call
}

// GetLastRecordId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) GetLastRecordId(ctx interface{}) *LogHandle_GetLastRecordId_Call {
	return &LogHandle_GetLastRecordId_Call{Call: _e.mock.On("GetLastRecordId", ctx)}
}

func (_c *LogHandle_GetLastRecordId_Call) Run(run func(ctx context.Context)) *LogHandle_GetLastRecordId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_GetLastRecordId_Call) Return(_a0 *log.LogMessageId, _a1 error) *LogHandle_GetLastRecordId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetLastRecordId_Call) RunAndReturn(run func(context.Context) (*log.LogMessageId, error)) *LogHandle_GetLastRecordId_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadataProvider provides a mock function with no fields
func (_m *LogHandle) GetMetadataProvider() meta.MetadataProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataProvider")
	}

	var r0 meta.MetadataProvider
	if rf, ok := ret.Get(0).(func() meta.MetadataProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meta.MetadataProvider)
		}
	}

	return r0
}

// LogHandle_GetMetadataProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadataProvider'
type LogHandle_GetMetadataProvider_Call struct {
	*mock.Call
}

// GetMetadataProvider is a helper method to define mock.On call
func (_e *LogHandle_Expecter) GetMetadataProvider() *LogHandle_GetMetadataProvider_Call {
	return &LogHandle_GetMetadataProvider_Call{Call: _e.mock.On("GetMetadataProvider")}
}

func (_c *LogHandle_GetMetadataProvider_Call) Run(run func()) *LogHandle_GetMetadataProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogHandle_GetMetadataProvider_Call) Return(_a0 meta.MetadataProvider) *LogHandle_GetMetadataProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_GetMetadataProvider_Call) RunAndReturn(run func() meta.MetadataProvider) *LogHandle_GetMetadataProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *LogHandle) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogHandle_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type LogHandle_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *LogHandle_Expecter) GetName() *LogHandle_GetName_Call {
	return &LogHandle_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *LogHandle_GetName_Call) Run(run func()) *LogHandle_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogHandle_GetName_Call) Return(_a0 string) *LogHandle_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_GetName_Call) RunAndReturn(run func() string) *LogHandle_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextSegmentId provides a mock function with no fields
func (_m *LogHandle) GetNextSegmentId() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextSegmentId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetNextSegmentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextSegmentId'
type LogHandle_GetNextSegmentId_Call struct {
	*mock.Call
}

// GetNextSegmentId is a helper method to define mock.On call
func (_e *LogHandle_Expecter) GetNextSegmentId() *LogHandle_GetNextSegmentId_Call {
	return &LogHandle_GetNextSegmentId_Call{Call: _e.mock.On("GetNextSegmentId")}
}

func (_c *LogHandle_GetNextSegmentId_Call) Run(run func()) *LogHandle_GetNextSegmentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogHandle_GetNextSegmentId_Call) Return(_a0 int64, _a1 error) *LogHandle_GetNextSegmentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetNextSegmentId_Call) RunAndReturn(run func() (int64, error)) *LogHandle_GetNextSegmentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateWritableSegmentHandle provides a mock function with given fields: ctx, writerInvalidationNotifier
func (_m *LogHandle) GetOrCreateWritableSegmentHandle(ctx context.Context, writerInvalidationNotifier func(context.Context, string)) (segment.SegmentHandle, error) {
	ret := _m.Called(ctx, writerInvalidationNotifier)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateWritableSegmentHandle")
	}

	var r0 segment.SegmentHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, string)) (segment.SegmentHandle, error)); ok {
		return rf(ctx, writerInvalidationNotifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, string)) segment.SegmentHandle); ok {
		r0 = rf(ctx, writerInvalidationNotifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(segment.SegmentHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(context.Context, string)) error); ok {
		r1 = rf(ctx, writerInvalidationNotifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetOrCreateWritableSegmentHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateWritableSegmentHandle'
type LogHandle_GetOrCreateWritableSegmentHandle_Call struct {
	*mock.Call
}

// GetOrCreateWritableSegmentHandle is a helper method to define mock.On call
//   - ctx context.Context
//   - writerInvalidationNotifier func(context.Context , string)
func (_e *LogHandle_Expecter) GetOrCreateWritableSegmentHandle(ctx interface{}, writerInvalidationNotifier interface{}) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	return &LogHandle_GetOrCreateWritableSegmentHandle_Call{Call: _e.mock.On("GetOrCreateWritableSegmentHandle", ctx, writerInvalidationNotifier)}
}

func (_c *LogHandle_GetOrCreateWritableSegmentHandle_Call) Run(run func(ctx context.Context, writerInvalidationNotifier func(context.Context, string))) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, string)))
	})
	return _c
}

func (_c *LogHandle_GetOrCreateWritableSegmentHandle_Call) Return(_a0 segment.SegmentHandle, _a1 error) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetOrCreateWritableSegmentHandle_Call) RunAndReturn(run func(context.Context, func(context.Context, string)) (segment.SegmentHandle, error)) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecoverableSegmentHandle provides a mock function with given fields: ctx, segmentId
func (_m *LogHandle) GetRecoverableSegmentHandle(ctx context.Context, segmentId int64) (segment.SegmentHandle, error) {
	ret := _m.Called(ctx, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetRecoverableSegmentHandle")
	}

	var r0 segment.SegmentHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (segment.SegmentHandle, error)); ok {
		return rf(ctx, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) segment.SegmentHandle); ok {
		r0 = rf(ctx, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(segment.SegmentHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetRecoverableSegmentHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecoverableSegmentHandle'
type LogHandle_GetRecoverableSegmentHandle_Call struct {
	*mock.Call
}

// GetRecoverableSegmentHandle is a helper method to define mock.On call
//   - ctx context.Context
//   - segmentId int64
func (_e *LogHandle_Expecter) GetRecoverableSegmentHandle(ctx interface{}, segmentId interface{}) *LogHandle_GetRecoverableSegmentHandle_Call {
	return &LogHandle_GetRecoverableSegmentHandle_Call{Call: _e.mock.On("GetRecoverableSegmentHandle", ctx, segmentId)}
}

func (_c *LogHandle_GetRecoverableSegmentHandle_Call) Run(run func(ctx context.Context, segmentId int64)) *LogHandle_GetRecoverableSegmentHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *LogHandle_GetRecoverableSegmentHandle_Call) Return(_a0 segment.SegmentHandle, _a1 error) *LogHandle_GetRecoverableSegmentHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetRecoverableSegmentHandle_Call) RunAndReturn(run func(context.Context, int64) (segment.SegmentHandle, error)) *LogHandle_GetRecoverableSegmentHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegments provides a mock function with given fields: ctx
func (_m *LogHandle) GetSegments(ctx context.Context) (map[int64]*meta.SegmentMeta, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSegments")
	}

	var r0 map[int64]*meta.SegmentMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int64]*meta.SegmentMeta, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int64]*meta.SegmentMeta); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]*meta.SegmentMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegments'
type LogHandle_GetSegments_Call struct {
	*mock.Call
}

// GetSegments is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) GetSegments(ctx interface{}) *LogHandle_GetSegments_Call {
	return &LogHandle_GetSegments_Call{Call: _e.mock.On("GetSegments", ctx)}
}

func (_c *LogHandle_GetSegments_Call) Run(run func(ctx context.Context)) *LogHandle_GetSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_GetSegments_Call) Return(_a0 map[int64]*meta.SegmentMeta, _a1 error) *LogHandle_GetSegments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetSegments_Call) RunAndReturn(run func(context.Context) (map[int64]*meta.SegmentMeta, error)) *LogHandle_GetSegments_Call {
	_c.Call.Return(run)
	return _c
}

// GetTruncatedRecordId provides a mock function with given fields: ctx
func (_m *LogHandle) GetTruncatedRecordId(ctx context.Context) (*log.LogMessageId, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTruncatedRecordId")
	}

	var r0 *log.LogMessageId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*log.LogMessageId, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *log.LogMessageId); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log.LogMessageId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetTruncatedRecordId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTruncatedRecordId'
type LogHandle_GetTruncatedRecordId_Call struct {
	*mock.Call
}

// GetTruncatedRecordId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) GetTruncatedRecordId(ctx interface{}) *LogHandle_GetTruncatedRecordId_Call {
	return &LogHandle_GetTruncatedRecordId_Call{Call: _e.mock.On("GetTruncatedRecordId", ctx)}
}

func (_c *LogHandle_GetTruncatedRecordId_Call) Run(run func(ctx context.Context)) *LogHandle_GetTruncatedRecordId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_GetTruncatedRecordId_Call) Return(_a0 *log.LogMessageId, _a1 error) *LogHandle_GetTruncatedRecordId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetTruncatedRecordId_Call) RunAndReturn(run func(context.Context) (*log.LogMessageId, error)) *LogHandle_GetTruncatedRecordId_Call {
	_c.Call.Return(run)
	return _c
}

// OpenInternalLogWriter provides a mock function with given fields: ctx
func (_m *LogHandle) OpenInternalLogWriter(ctx context.Context) (log.LogWriter, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OpenInternalLogWriter")
	}

	var r0 log.LogWriter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (log.LogWriter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) log.LogWriter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LogWriter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_OpenInternalLogWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenInternalLogWriter'
type LogHandle_OpenInternalLogWriter_Call struct {
	*mock.Call
}

// OpenInternalLogWriter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) OpenInternalLogWriter(ctx interface{}) *LogHandle_OpenInternalLogWriter_Call {
	return &LogHandle_OpenInternalLogWriter_Call{Call: _e.mock.On("OpenInternalLogWriter", ctx)}
}

func (_c *LogHandle_OpenInternalLogWriter_Call) Run(run func(ctx context.Context)) *LogHandle_OpenInternalLogWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_OpenInternalLogWriter_Call) Return(_a0 log.LogWriter, _a1 error) *LogHandle_OpenInternalLogWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_OpenInternalLogWriter_Call) RunAndReturn(run func(context.Context) (log.LogWriter, error)) *LogHandle_OpenInternalLogWriter_Call {
	_c.Call.Return(run)
	return _c
}

// OpenLogReader provides a mock function with given fields: ctx, from, readerBaseName
func (_m *LogHandle) OpenLogReader(ctx context.Context, from *log.LogMessageId, readerBaseName string) (log.LogReader, error) {
	ret := _m.Called(ctx, from, readerBaseName)

	if len(ret) == 0 {
		panic("no return value specified for OpenLogReader")
	}

	var r0 log.LogReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *log.LogMessageId, string) (log.LogReader, error)); ok {
		return rf(ctx, from, readerBaseName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *log.LogMessageId, string) log.LogReader); ok {
		r0 = rf(ctx, from, readerBaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LogReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *log.LogMessageId, string) error); ok {
		r1 = rf(ctx, from, readerBaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_OpenLogReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenLogReader'
type LogHandle_OpenLogReader_Call struct {
	*mock.Call
}

// OpenLogReader is a helper method to define mock.On call
//   - ctx context.Context
//   - from *log.LogMessageId
//   - readerBaseName string
func (_e *LogHandle_Expecter) OpenLogReader(ctx interface{}, from interface{}, readerBaseName interface{}) *LogHandle_OpenLogReader_Call {
	return &LogHandle_OpenLogReader_Call{Call: _e.mock.On("OpenLogReader", ctx, from, readerBaseName)}
}

func (_c *LogHandle_OpenLogReader_Call) Run(run func(ctx context.Context, from *log.LogMessageId, readerBaseName string)) *LogHandle_OpenLogReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*log.LogMessageId), args[2].(string))
	})
	return _c
}

func (_c *LogHandle_OpenLogReader_Call) Return(_a0 log.LogReader, _a1 error) *LogHandle_OpenLogReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_OpenLogReader_Call) RunAndReturn(run func(context.Context, *log.LogMessageId, string) (log.LogReader, error)) *LogHandle_OpenLogReader_Call {
	_c.Call.Return(run)
	return _c
}

// OpenLogWriter provides a mock function with given fields: ctx
func (_m *LogHandle) OpenLogWriter(ctx context.Context) (log.LogWriter, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OpenLogWriter")
	}

	var r0 log.LogWriter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (log.LogWriter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) log.LogWriter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LogWriter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_OpenLogWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenLogWriter'
type LogHandle_OpenLogWriter_Call struct {
	*mock.Call
}

// OpenLogWriter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogHandle_Expecter) OpenLogWriter(ctx interface{}) *LogHandle_OpenLogWriter_Call {
	return &LogHandle_OpenLogWriter_Call{Call: _e.mock.On("OpenLogWriter", ctx)}
}

func (_c *LogHandle_OpenLogWriter_Call) Run(run func(ctx context.Context)) *LogHandle_OpenLogWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_OpenLogWriter_Call) Return(_a0 log.LogWriter, _a1 error) *LogHandle_OpenLogWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_OpenLogWriter_Call) RunAndReturn(run func(context.Context) (log.LogWriter, error)) *LogHandle_OpenLogWriter_Call {
	_c.Call.Return(run)
	return _c
}

// Truncate provides a mock function with given fields: ctx, recordId
func (_m *LogHandle) Truncate(ctx context.Context, recordId *log.LogMessageId) error {
	ret := _m.Called(ctx, recordId)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *log.LogMessageId) error); ok {
		r0 = rf(ctx, recordId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogHandle_Truncate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Truncate'
type LogHandle_Truncate_Call struct {
	*mock.Call
}

// Truncate is a helper method to define mock.On call
//   - ctx context.Context
//   - recordId *log.LogMessageId
func (_e *LogHandle_Expecter) Truncate(ctx interface{}, recordId interface{}) *LogHandle_Truncate_Call {
	return &LogHandle_Truncate_Call{Call: _e.mock.On("Truncate", ctx, recordId)}
}

func (_c *LogHandle_Truncate_Call) Run(run func(ctx context.Context, recordId *log.LogMessageId)) *LogHandle_Truncate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*log.LogMessageId))
	})
	return _c
}

func (_c *LogHandle_Truncate_Call) Return(_a0 error) *LogHandle_Truncate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_Truncate_Call) RunAndReturn(run func(context.Context, *log.LogMessageId) error) *LogHandle_Truncate_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogHandle creates a new instance of LogHandle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogHandle(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogHandle {
	mock := &LogHandle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
