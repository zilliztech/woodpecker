// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_logstore_client

import (
	channel "github.com/zilliztech/woodpecker/common/channel"

	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/zilliztech/woodpecker/proto"
)

// LogStoreClient is an autogenerated mock type for the LogStoreClient type
type LogStoreClient struct {
	mock.Mock
}

type LogStoreClient_Expecter struct {
	mock *mock.Mock
}

func (_m *LogStoreClient) EXPECT() *LogStoreClient_Expecter {
	return &LogStoreClient_Expecter{mock: &_m.Mock}
}

// AppendEntry provides a mock function with given fields: ctx, bucketName, rootPath, logId, entry, syncedResultCh
func (_m *LogStoreClient) AppendEntry(ctx context.Context, bucketName string, rootPath string, logId int64, entry *proto.LogEntry, syncedResultCh channel.ResultChannel) (int64, error) {
	ret := _m.Called(ctx, bucketName, rootPath, logId, entry, syncedResultCh)

	if len(ret) == 0 {
		panic("no return value specified for AppendEntry")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *proto.LogEntry, channel.ResultChannel) (int64, error)); ok {
		return rf(ctx, bucketName, rootPath, logId, entry, syncedResultCh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *proto.LogEntry, channel.ResultChannel) int64); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, entry, syncedResultCh)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, *proto.LogEntry, channel.ResultChannel) error); ok {
		r1 = rf(ctx, bucketName, rootPath, logId, entry, syncedResultCh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_AppendEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendEntry'
type LogStoreClient_AppendEntry_Call struct {
	*mock.Call
}

// AppendEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - entry *proto.LogEntry
//   - syncedResultCh channel.ResultChannel
func (_e *LogStoreClient_Expecter) AppendEntry(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, entry interface{}, syncedResultCh interface{}) *LogStoreClient_AppendEntry_Call {
	return &LogStoreClient_AppendEntry_Call{Call: _e.mock.On("AppendEntry", ctx, bucketName, rootPath, logId, entry, syncedResultCh)}
}

func (_c *LogStoreClient_AppendEntry_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, entry *proto.LogEntry, syncedResultCh channel.ResultChannel)) *LogStoreClient_AppendEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(*proto.LogEntry), args[5].(channel.ResultChannel))
	})
	return _c
}

func (_c *LogStoreClient_AppendEntry_Call) Return(_a0 int64, _a1 error) *LogStoreClient_AppendEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_AppendEntry_Call) RunAndReturn(run func(context.Context, string, string, int64, *proto.LogEntry, channel.ResultChannel) (int64, error)) *LogStoreClient_AppendEntry_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *LogStoreClient) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStoreClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type LogStoreClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogStoreClient_Expecter) Close(ctx interface{}) *LogStoreClient_Close_Call {
	return &LogStoreClient_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *LogStoreClient_Close_Call) Run(run func(ctx context.Context)) *LogStoreClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogStoreClient_Close_Call) Return(_a0 error) *LogStoreClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStoreClient_Close_Call) RunAndReturn(run func(context.Context) error) *LogStoreClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteSegment provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId, lac
func (_m *LogStoreClient) CompleteSegment(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, lac int64) (int64, error) {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId, lac)

	if len(ret) == 0 {
		panic("no return value specified for CompleteSegment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int64) (int64, error)); ok {
		return rf(ctx, bucketName, rootPath, logId, segmentId, lac)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int64) int64); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId, lac)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64, int64) error); ok {
		r1 = rf(ctx, bucketName, rootPath, logId, segmentId, lac)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_CompleteSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteSegment'
type LogStoreClient_CompleteSegment_Call struct {
	*mock.Call
}

// CompleteSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
//   - lac int64
func (_e *LogStoreClient_Expecter) CompleteSegment(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}, lac interface{}) *LogStoreClient_CompleteSegment_Call {
	return &LogStoreClient_CompleteSegment_Call{Call: _e.mock.On("CompleteSegment", ctx, bucketName, rootPath, logId, segmentId, lac)}
}

func (_c *LogStoreClient_CompleteSegment_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, lac int64)) *LogStoreClient_CompleteSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64), args[5].(int64))
	})
	return _c
}

func (_c *LogStoreClient_CompleteSegment_Call) Return(_a0 int64, _a1 error) *LogStoreClient_CompleteSegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_CompleteSegment_Call) RunAndReturn(run func(context.Context, string, string, int64, int64, int64) (int64, error)) *LogStoreClient_CompleteSegment_Call {
	_c.Call.Return(run)
	return _c
}

// FenceSegment provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId
func (_m *LogStoreClient) FenceSegment(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64) (int64, error) {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for FenceSegment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) (int64, error)); ok {
		return rf(ctx, bucketName, rootPath, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) int64); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_FenceSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FenceSegment'
type LogStoreClient_FenceSegment_Call struct {
	*mock.Call
}

// FenceSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) FenceSegment(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_FenceSegment_Call {
	return &LogStoreClient_FenceSegment_Call{Call: _e.mock.On("FenceSegment", ctx, bucketName, rootPath, logId, segmentId)}
}

func (_c *LogStoreClient_FenceSegment_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64)) *LogStoreClient_FenceSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *LogStoreClient_FenceSegment_Call) Return(_a0 int64, _a1 error) *LogStoreClient_FenceSegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_FenceSegment_Call) RunAndReturn(run func(context.Context, string, string, int64, int64) (int64, error)) *LogStoreClient_FenceSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockCount provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId
func (_m *LogStoreClient) GetBlockCount(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64) (int64, error) {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) (int64, error)); ok {
		return rf(ctx, bucketName, rootPath, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) int64); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_GetBlockCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockCount'
type LogStoreClient_GetBlockCount_Call struct {
	*mock.Call
}

// GetBlockCount is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) GetBlockCount(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_GetBlockCount_Call {
	return &LogStoreClient_GetBlockCount_Call{Call: _e.mock.On("GetBlockCount", ctx, bucketName, rootPath, logId, segmentId)}
}

func (_c *LogStoreClient_GetBlockCount_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64)) *LogStoreClient_GetBlockCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *LogStoreClient_GetBlockCount_Call) Return(_a0 int64, _a1 error) *LogStoreClient_GetBlockCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_GetBlockCount_Call) RunAndReturn(run func(context.Context, string, string, int64, int64) (int64, error)) *LogStoreClient_GetBlockCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastAddConfirmed provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId
func (_m *LogStoreClient) GetLastAddConfirmed(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64) (int64, error) {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastAddConfirmed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) (int64, error)); ok {
		return rf(ctx, bucketName, rootPath, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) int64); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_GetLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastAddConfirmed'
type LogStoreClient_GetLastAddConfirmed_Call struct {
	*mock.Call
}

// GetLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) GetLastAddConfirmed(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_GetLastAddConfirmed_Call {
	return &LogStoreClient_GetLastAddConfirmed_Call{Call: _e.mock.On("GetLastAddConfirmed", ctx, bucketName, rootPath, logId, segmentId)}
}

func (_c *LogStoreClient_GetLastAddConfirmed_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64)) *LogStoreClient_GetLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *LogStoreClient_GetLastAddConfirmed_Call) Return(_a0 int64, _a1 error) *LogStoreClient_GetLastAddConfirmed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_GetLastAddConfirmed_Call) RunAndReturn(run func(context.Context, string, string, int64, int64) (int64, error)) *LogStoreClient_GetLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEntriesBatchAdv provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId, fromEntryId, maxEntries, lastReadState
func (_m *LogStoreClient) ReadEntriesBatchAdv(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, fromEntryId int64, maxEntries int64, lastReadState *proto.LastReadState) (*proto.BatchReadResult, error) {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId, fromEntryId, maxEntries, lastReadState)

	if len(ret) == 0 {
		panic("no return value specified for ReadEntriesBatchAdv")
	}

	var r0 *proto.BatchReadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int64, int64, *proto.LastReadState) (*proto.BatchReadResult, error)); ok {
		return rf(ctx, bucketName, rootPath, logId, segmentId, fromEntryId, maxEntries, lastReadState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int64, int64, *proto.LastReadState) *proto.BatchReadResult); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId, fromEntryId, maxEntries, lastReadState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BatchReadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64, int64, int64, *proto.LastReadState) error); ok {
		r1 = rf(ctx, bucketName, rootPath, logId, segmentId, fromEntryId, maxEntries, lastReadState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_ReadEntriesBatchAdv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEntriesBatchAdv'
type LogStoreClient_ReadEntriesBatchAdv_Call struct {
	*mock.Call
}

// ReadEntriesBatchAdv is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
//   - fromEntryId int64
//   - maxEntries int64
//   - lastReadState *proto.LastReadState
func (_e *LogStoreClient_Expecter) ReadEntriesBatchAdv(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}, fromEntryId interface{}, maxEntries interface{}, lastReadState interface{}) *LogStoreClient_ReadEntriesBatchAdv_Call {
	return &LogStoreClient_ReadEntriesBatchAdv_Call{Call: _e.mock.On("ReadEntriesBatchAdv", ctx, bucketName, rootPath, logId, segmentId, fromEntryId, maxEntries, lastReadState)}
}

func (_c *LogStoreClient_ReadEntriesBatchAdv_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, fromEntryId int64, maxEntries int64, lastReadState *proto.LastReadState)) *LogStoreClient_ReadEntriesBatchAdv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64), args[5].(int64), args[6].(int64), args[7].(*proto.LastReadState))
	})
	return _c
}

func (_c *LogStoreClient_ReadEntriesBatchAdv_Call) Return(_a0 *proto.BatchReadResult, _a1 error) *LogStoreClient_ReadEntriesBatchAdv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_ReadEntriesBatchAdv_Call) RunAndReturn(run func(context.Context, string, string, int64, int64, int64, int64, *proto.LastReadState) (*proto.BatchReadResult, error)) *LogStoreClient_ReadEntriesBatchAdv_Call {
	_c.Call.Return(run)
	return _c
}

// SegmentClean provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId, flag
func (_m *LogStoreClient) SegmentClean(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, flag int) error {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId, flag)

	if len(ret) == 0 {
		panic("no return value specified for SegmentClean")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int) error); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId, flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStoreClient_SegmentClean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SegmentClean'
type LogStoreClient_SegmentClean_Call struct {
	*mock.Call
}

// SegmentClean is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
//   - flag int
func (_e *LogStoreClient_Expecter) SegmentClean(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}, flag interface{}) *LogStoreClient_SegmentClean_Call {
	return &LogStoreClient_SegmentClean_Call{Call: _e.mock.On("SegmentClean", ctx, bucketName, rootPath, logId, segmentId, flag)}
}

func (_c *LogStoreClient_SegmentClean_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, flag int)) *LogStoreClient_SegmentClean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64), args[5].(int))
	})
	return _c
}

func (_c *LogStoreClient_SegmentClean_Call) Return(_a0 error) *LogStoreClient_SegmentClean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStoreClient_SegmentClean_Call) RunAndReturn(run func(context.Context, string, string, int64, int64, int) error) *LogStoreClient_SegmentClean_Call {
	_c.Call.Return(run)
	return _c
}

// SegmentCompact provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId
func (_m *LogStoreClient) SegmentCompact(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for SegmentCompact")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx, bucketName, rootPath, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) *proto.SegmentMetadata); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, bucketName, rootPath, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_SegmentCompact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SegmentCompact'
type LogStoreClient_SegmentCompact_Call struct {
	*mock.Call
}

// SegmentCompact is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) SegmentCompact(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_SegmentCompact_Call {
	return &LogStoreClient_SegmentCompact_Call{Call: _e.mock.On("SegmentCompact", ctx, bucketName, rootPath, logId, segmentId)}
}

func (_c *LogStoreClient_SegmentCompact_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64)) *LogStoreClient_SegmentCompact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *LogStoreClient_SegmentCompact_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *LogStoreClient_SegmentCompact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_SegmentCompact_Call) RunAndReturn(run func(context.Context, string, string, int64, int64) (*proto.SegmentMetadata, error)) *LogStoreClient_SegmentCompact_Call {
	_c.Call.Return(run)
	return _c
}

// SelectNodes provides a mock function with given fields: ctx, strategyType, affinityMode, filters
func (_m *LogStoreClient) SelectNodes(ctx context.Context, strategyType proto.StrategyType, affinityMode proto.AffinityMode, filters []*proto.NodeFilter) ([]*proto.NodeMeta, error) {
	ret := _m.Called(ctx, strategyType, affinityMode, filters)

	if len(ret) == 0 {
		panic("no return value specified for SelectNodes")
	}

	var r0 []*proto.NodeMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, proto.StrategyType, proto.AffinityMode, []*proto.NodeFilter) ([]*proto.NodeMeta, error)); ok {
		return rf(ctx, strategyType, affinityMode, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, proto.StrategyType, proto.AffinityMode, []*proto.NodeFilter) []*proto.NodeMeta); ok {
		r0 = rf(ctx, strategyType, affinityMode, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.NodeMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, proto.StrategyType, proto.AffinityMode, []*proto.NodeFilter) error); ok {
		r1 = rf(ctx, strategyType, affinityMode, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_SelectNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectNodes'
type LogStoreClient_SelectNodes_Call struct {
	*mock.Call
}

// SelectNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - strategyType proto.StrategyType
//   - affinityMode proto.AffinityMode
//   - filters []*proto.NodeFilter
func (_e *LogStoreClient_Expecter) SelectNodes(ctx interface{}, strategyType interface{}, affinityMode interface{}, filters interface{}) *LogStoreClient_SelectNodes_Call {
	return &LogStoreClient_SelectNodes_Call{Call: _e.mock.On("SelectNodes", ctx, strategyType, affinityMode, filters)}
}

func (_c *LogStoreClient_SelectNodes_Call) Run(run func(ctx context.Context, strategyType proto.StrategyType, affinityMode proto.AffinityMode, filters []*proto.NodeFilter)) *LogStoreClient_SelectNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(proto.StrategyType), args[2].(proto.AffinityMode), args[3].([]*proto.NodeFilter))
	})
	return _c
}

func (_c *LogStoreClient_SelectNodes_Call) Return(_a0 []*proto.NodeMeta, _a1 error) *LogStoreClient_SelectNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_SelectNodes_Call) RunAndReturn(run func(context.Context, proto.StrategyType, proto.AffinityMode, []*proto.NodeFilter) ([]*proto.NodeMeta, error)) *LogStoreClient_SelectNodes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastAddConfirmed provides a mock function with given fields: ctx, bucketName, rootPath, logId, segmentId, lac
func (_m *LogStoreClient) UpdateLastAddConfirmed(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, lac int64) error {
	ret := _m.Called(ctx, bucketName, rootPath, logId, segmentId, lac)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastAddConfirmed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64, int64) error); ok {
		r0 = rf(ctx, bucketName, rootPath, logId, segmentId, lac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStoreClient_UpdateLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastAddConfirmed'
type LogStoreClient_UpdateLastAddConfirmed_Call struct {
	*mock.Call
}

// UpdateLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - rootPath string
//   - logId int64
//   - segmentId int64
//   - lac int64
func (_e *LogStoreClient_Expecter) UpdateLastAddConfirmed(ctx interface{}, bucketName interface{}, rootPath interface{}, logId interface{}, segmentId interface{}, lac interface{}) *LogStoreClient_UpdateLastAddConfirmed_Call {
	return &LogStoreClient_UpdateLastAddConfirmed_Call{Call: _e.mock.On("UpdateLastAddConfirmed", ctx, bucketName, rootPath, logId, segmentId, lac)}
}

func (_c *LogStoreClient_UpdateLastAddConfirmed_Call) Run(run func(ctx context.Context, bucketName string, rootPath string, logId int64, segmentId int64, lac int64)) *LogStoreClient_UpdateLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64), args[5].(int64))
	})
	return _c
}

func (_c *LogStoreClient_UpdateLastAddConfirmed_Call) Return(_a0 error) *LogStoreClient_UpdateLastAddConfirmed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStoreClient_UpdateLastAddConfirmed_Call) RunAndReturn(run func(context.Context, string, string, int64, int64, int64) error) *LogStoreClient_UpdateLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogStoreClient creates a new instance of LogStoreClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogStoreClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogStoreClient {
	mock := &LogStoreClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
