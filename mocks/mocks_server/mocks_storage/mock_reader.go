// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	proto "github.com/zilliztech/woodpecker/proto"

	storage "github.com/zilliztech/woodpecker/server/storage"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

type Reader_Expecter struct {
	mock *mock.Mock
}

func (_m *Reader) EXPECT() *Reader_Expecter {
	return &Reader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *Reader) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Reader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Reader_Expecter) Close(ctx interface{}) *Reader_Close_Call {
	return &Reader_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *Reader_Close_Call) Run(run func(ctx context.Context)) *Reader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Reader_Close_Call) Return(_a0 error) *Reader_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Reader_Close_Call) RunAndReturn(run func(context.Context) error) *Reader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastEntryID provides a mock function with given fields: ctx
func (_m *Reader) GetLastEntryID(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastEntryID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reader_GetLastEntryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastEntryID'
type Reader_GetLastEntryID_Call struct {
	*mock.Call
}

// GetLastEntryID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Reader_Expecter) GetLastEntryID(ctx interface{}) *Reader_GetLastEntryID_Call {
	return &Reader_GetLastEntryID_Call{Call: _e.mock.On("GetLastEntryID", ctx)}
}

func (_c *Reader_GetLastEntryID_Call) Run(run func(ctx context.Context)) *Reader_GetLastEntryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Reader_GetLastEntryID_Call) Return(_a0 int64, _a1 error) *Reader_GetLastEntryID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Reader_GetLastEntryID_Call) RunAndReturn(run func(context.Context) (int64, error)) *Reader_GetLastEntryID_Call {
	_c.Call.Return(run)
	return _c
}

// ReadNextBatchAdv provides a mock function with given fields: ctx, opt, lastReadBatchInfo
func (_m *Reader) ReadNextBatchAdv(ctx context.Context, opt storage.ReaderOpt, lastReadBatchInfo *proto.LastReadState) (*proto.BatchReadResult, error) {
	ret := _m.Called(ctx, opt, lastReadBatchInfo)

	if len(ret) == 0 {
		panic("no return value specified for ReadNextBatchAdv")
	}

	var r0 *proto.BatchReadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.ReaderOpt, *proto.LastReadState) (*proto.BatchReadResult, error)); ok {
		return rf(ctx, opt, lastReadBatchInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.ReaderOpt, *proto.LastReadState) *proto.BatchReadResult); ok {
		r0 = rf(ctx, opt, lastReadBatchInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BatchReadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.ReaderOpt, *proto.LastReadState) error); ok {
		r1 = rf(ctx, opt, lastReadBatchInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reader_ReadNextBatchAdv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadNextBatchAdv'
type Reader_ReadNextBatchAdv_Call struct {
	*mock.Call
}

// ReadNextBatchAdv is a helper method to define mock.On call
//   - ctx context.Context
//   - opt storage.ReaderOpt
//   - lastReadBatchInfo *proto.LastReadState
func (_e *Reader_Expecter) ReadNextBatchAdv(ctx interface{}, opt interface{}, lastReadBatchInfo interface{}) *Reader_ReadNextBatchAdv_Call {
	return &Reader_ReadNextBatchAdv_Call{Call: _e.mock.On("ReadNextBatchAdv", ctx, opt, lastReadBatchInfo)}
}

func (_c *Reader_ReadNextBatchAdv_Call) Run(run func(ctx context.Context, opt storage.ReaderOpt, lastReadBatchInfo *proto.LastReadState)) *Reader_ReadNextBatchAdv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.ReaderOpt), args[2].(*proto.LastReadState))
	})
	return _c
}

func (_c *Reader_ReadNextBatchAdv_Call) Return(_a0 *proto.BatchReadResult, _a1 error) *Reader_ReadNextBatchAdv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Reader_ReadNextBatchAdv_Call) RunAndReturn(run func(context.Context, storage.ReaderOpt, *proto.LastReadState) (*proto.BatchReadResult, error)) *Reader_ReadNextBatchAdv_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastAddConfirmed provides a mock function with given fields: ctx, lac
func (_m *Reader) UpdateLastAddConfirmed(ctx context.Context, lac int64) error {
	ret := _m.Called(ctx, lac)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastAddConfirmed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, lac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reader_UpdateLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastAddConfirmed'
type Reader_UpdateLastAddConfirmed_Call struct {
	*mock.Call
}

// UpdateLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - lac int64
func (_e *Reader_Expecter) UpdateLastAddConfirmed(ctx interface{}, lac interface{}) *Reader_UpdateLastAddConfirmed_Call {
	return &Reader_UpdateLastAddConfirmed_Call{Call: _e.mock.On("UpdateLastAddConfirmed", ctx, lac)}
}

func (_c *Reader_UpdateLastAddConfirmed_Call) Run(run func(ctx context.Context, lac int64)) *Reader_UpdateLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Reader_UpdateLastAddConfirmed_Call) Return(_a0 error) *Reader_UpdateLastAddConfirmed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Reader_UpdateLastAddConfirmed_Call) RunAndReturn(run func(context.Context, int64) error) *Reader_UpdateLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
