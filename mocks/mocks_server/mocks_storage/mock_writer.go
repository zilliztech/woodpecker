// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_storage

import (
	context "context"

	channel "github.com/zilliztech/woodpecker/common/channel"

	mock "github.com/stretchr/testify/mock"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

type Writer_Expecter struct {
	mock *mock.Mock
}

func (_m *Writer) EXPECT() *Writer_Expecter {
	return &Writer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *Writer) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Writer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Writer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Writer_Expecter) Close(ctx interface{}) *Writer_Close_Call {
	return &Writer_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *Writer_Close_Call) Run(run func(ctx context.Context)) *Writer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Writer_Close_Call) Return(_a0 error) *Writer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_Close_Call) RunAndReturn(run func(context.Context) error) *Writer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Compact provides a mock function with given fields: ctx
func (_m *Writer) Compact(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Compact")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Writer_Compact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compact'
type Writer_Compact_Call struct {
	*mock.Call
}

// Compact is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Writer_Expecter) Compact(ctx interface{}) *Writer_Compact_Call {
	return &Writer_Compact_Call{Call: _e.mock.On("Compact", ctx)}
}

func (_c *Writer_Compact_Call) Run(run func(ctx context.Context)) *Writer_Compact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Writer_Compact_Call) Return(_a0 int64, _a1 error) *Writer_Compact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Writer_Compact_Call) RunAndReturn(run func(context.Context) (int64, error)) *Writer_Compact_Call {
	_c.Call.Return(run)
	return _c
}

// Fence provides a mock function with given fields: ctx
func (_m *Writer) Fence(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fence")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Writer_Fence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fence'
type Writer_Fence_Call struct {
	*mock.Call
}

// Fence is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Writer_Expecter) Fence(ctx interface{}) *Writer_Fence_Call {
	return &Writer_Fence_Call{Call: _e.mock.On("Fence", ctx)}
}

func (_c *Writer_Fence_Call) Run(run func(ctx context.Context)) *Writer_Fence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Writer_Fence_Call) Return(_a0 int64, _a1 error) *Writer_Fence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Writer_Fence_Call) RunAndReturn(run func(context.Context) (int64, error)) *Writer_Fence_Call {
	_c.Call.Return(run)
	return _c
}

// Finalize provides a mock function with given fields: ctx, lac
func (_m *Writer) Finalize(ctx context.Context, lac int64) (int64, error) {
	ret := _m.Called(ctx, lac)

	if len(ret) == 0 {
		panic("no return value specified for Finalize")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, lac)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, lac)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, lac)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Writer_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type Writer_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
//   - ctx context.Context
//   - lac int64
func (_e *Writer_Expecter) Finalize(ctx interface{}, lac interface{}) *Writer_Finalize_Call {
	return &Writer_Finalize_Call{Call: _e.mock.On("Finalize", ctx, lac)}
}

func (_c *Writer_Finalize_Call) Run(run func(ctx context.Context, lac int64)) *Writer_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Writer_Finalize_Call) Return(_a0 int64, _a1 error) *Writer_Finalize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Writer_Finalize_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *Writer_Finalize_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockCount provides a mock function with given fields: ctx
func (_m *Writer) GetBlockCount(ctx context.Context) int64 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Writer_GetBlockCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockCount'
type Writer_GetBlockCount_Call struct {
	*mock.Call
}

// GetBlockCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Writer_Expecter) GetBlockCount(ctx interface{}) *Writer_GetBlockCount_Call {
	return &Writer_GetBlockCount_Call{Call: _e.mock.On("GetBlockCount", ctx)}
}

func (_c *Writer_GetBlockCount_Call) Run(run func(ctx context.Context)) *Writer_GetBlockCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Writer_GetBlockCount_Call) Return(_a0 int64) *Writer_GetBlockCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_GetBlockCount_Call) RunAndReturn(run func(context.Context) int64) *Writer_GetBlockCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstEntryId provides a mock function with given fields: ctx
func (_m *Writer) GetFirstEntryId(ctx context.Context) int64 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstEntryId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Writer_GetFirstEntryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstEntryId'
type Writer_GetFirstEntryId_Call struct {
	*mock.Call
}

// GetFirstEntryId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Writer_Expecter) GetFirstEntryId(ctx interface{}) *Writer_GetFirstEntryId_Call {
	return &Writer_GetFirstEntryId_Call{Call: _e.mock.On("GetFirstEntryId", ctx)}
}

func (_c *Writer_GetFirstEntryId_Call) Run(run func(ctx context.Context)) *Writer_GetFirstEntryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Writer_GetFirstEntryId_Call) Return(_a0 int64) *Writer_GetFirstEntryId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_GetFirstEntryId_Call) RunAndReturn(run func(context.Context) int64) *Writer_GetFirstEntryId_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastEntryId provides a mock function with given fields: ctx
func (_m *Writer) GetLastEntryId(ctx context.Context) int64 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastEntryId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Writer_GetLastEntryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastEntryId'
type Writer_GetLastEntryId_Call struct {
	*mock.Call
}

// GetLastEntryId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Writer_Expecter) GetLastEntryId(ctx interface{}) *Writer_GetLastEntryId_Call {
	return &Writer_GetLastEntryId_Call{Call: _e.mock.On("GetLastEntryId", ctx)}
}

func (_c *Writer_GetLastEntryId_Call) Run(run func(ctx context.Context)) *Writer_GetLastEntryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Writer_GetLastEntryId_Call) Return(_a0 int64) *Writer_GetLastEntryId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_GetLastEntryId_Call) RunAndReturn(run func(context.Context) int64) *Writer_GetLastEntryId_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx
func (_m *Writer) Sync(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Writer_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type Writer_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Writer_Expecter) Sync(ctx interface{}) *Writer_Sync_Call {
	return &Writer_Sync_Call{Call: _e.mock.On("Sync", ctx)}
}

func (_c *Writer_Sync_Call) Run(run func(ctx context.Context)) *Writer_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Writer_Sync_Call) Return(_a0 error) *Writer_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_Sync_Call) RunAndReturn(run func(context.Context) error) *Writer_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// WriteDataAsync provides a mock function with given fields: ctx, entryId, data, resultCh
func (_m *Writer) WriteDataAsync(ctx context.Context, entryId int64, data []byte, resultCh channel.ResultChannel) (int64, error) {
	ret := _m.Called(ctx, entryId, data, resultCh)

	if len(ret) == 0 {
		panic("no return value specified for WriteDataAsync")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte, channel.ResultChannel) (int64, error)); ok {
		return rf(ctx, entryId, data, resultCh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte, channel.ResultChannel) int64); ok {
		r0 = rf(ctx, entryId, data, resultCh)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []byte, channel.ResultChannel) error); ok {
		r1 = rf(ctx, entryId, data, resultCh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Writer_WriteDataAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteDataAsync'
type Writer_WriteDataAsync_Call struct {
	*mock.Call
}

// WriteDataAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - entryId int64
//   - data []byte
//   - resultCh channel.ResultChannel
func (_e *Writer_Expecter) WriteDataAsync(ctx interface{}, entryId interface{}, data interface{}, resultCh interface{}) *Writer_WriteDataAsync_Call {
	return &Writer_WriteDataAsync_Call{Call: _e.mock.On("WriteDataAsync", ctx, entryId, data, resultCh)}
}

func (_c *Writer_WriteDataAsync_Call) Run(run func(ctx context.Context, entryId int64, data []byte, resultCh channel.ResultChannel)) *Writer_WriteDataAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]byte), args[3].(channel.ResultChannel))
	})
	return _c
}

func (_c *Writer_WriteDataAsync_Call) Return(_a0 int64, _a1 error) *Writer_WriteDataAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Writer_WriteDataAsync_Call) RunAndReturn(run func(context.Context, int64, []byte, channel.ResultChannel) (int64, error)) *Writer_WriteDataAsync_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
