// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_server

import (
	context "context"

	channel "github.com/zilliztech/woodpecker/common/channel"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/zilliztech/woodpecker/proto"
)

// LogStore is an autogenerated mock type for the LogStore type
type LogStore struct {
	mock.Mock
}

type LogStore_Expecter struct {
	mock *mock.Mock
}

func (_m *LogStore) EXPECT() *LogStore_Expecter {
	return &LogStore_Expecter{mock: &_m.Mock}
}

// AddEntry provides a mock function with given fields: ctx, logId, entry, syncedResultCh
func (_m *LogStore) AddEntry(ctx context.Context, logId int64, entry *proto.LogEntry, syncedResultCh channel.ResultChannel) (int64, error) {
	ret := _m.Called(ctx, logId, entry, syncedResultCh)

	if len(ret) == 0 {
		panic("no return value specified for AddEntry")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *proto.LogEntry, channel.ResultChannel) (int64, error)); ok {
		return rf(ctx, logId, entry, syncedResultCh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *proto.LogEntry, channel.ResultChannel) int64); ok {
		r0 = rf(ctx, logId, entry, syncedResultCh)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *proto.LogEntry, channel.ResultChannel) error); ok {
		r1 = rf(ctx, logId, entry, syncedResultCh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStore_AddEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntry'
type LogStore_AddEntry_Call struct {
	*mock.Call
}

// AddEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - entry *proto.LogEntry
//   - syncedResultCh channel.ResultChannel
func (_e *LogStore_Expecter) AddEntry(ctx interface{}, logId interface{}, entry interface{}, syncedResultCh interface{}) *LogStore_AddEntry_Call {
	return &LogStore_AddEntry_Call{Call: _e.mock.On("AddEntry", ctx, logId, entry, syncedResultCh)}
}

func (_c *LogStore_AddEntry_Call) Run(run func(ctx context.Context, logId int64, entry *proto.LogEntry, syncedResultCh channel.ResultChannel)) *LogStore_AddEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*proto.LogEntry), args[3].(channel.ResultChannel))
	})
	return _c
}

func (_c *LogStore_AddEntry_Call) Return(_a0 int64, _a1 error) *LogStore_AddEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStore_AddEntry_Call) RunAndReturn(run func(context.Context, int64, *proto.LogEntry, channel.ResultChannel) (int64, error)) *LogStore_AddEntry_Call {
	_c.Call.Return(run)
	return _c
}

// CleanSegment provides a mock function with given fields: ctx, logId, segmentId, flag
func (_m *LogStore) CleanSegment(ctx context.Context, logId int64, segmentId int64, flag int) error {
	ret := _m.Called(ctx, logId, segmentId, flag)

	if len(ret) == 0 {
		panic("no return value specified for CleanSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) error); ok {
		r0 = rf(ctx, logId, segmentId, flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStore_CleanSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanSegment'
type LogStore_CleanSegment_Call struct {
	*mock.Call
}

// CleanSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
//   - flag int
func (_e *LogStore_Expecter) CleanSegment(ctx interface{}, logId interface{}, segmentId interface{}, flag interface{}) *LogStore_CleanSegment_Call {
	return &LogStore_CleanSegment_Call{Call: _e.mock.On("CleanSegment", ctx, logId, segmentId, flag)}
}

func (_c *LogStore_CleanSegment_Call) Run(run func(ctx context.Context, logId int64, segmentId int64, flag int)) *LogStore_CleanSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *LogStore_CleanSegment_Call) Return(_a0 error) *LogStore_CleanSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStore_CleanSegment_Call) RunAndReturn(run func(context.Context, int64, int64, int) error) *LogStore_CleanSegment_Call {
	_c.Call.Return(run)
	return _c
}

// CompactSegment provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStore) CompactSegment(ctx context.Context, logId int64, segmentId int64) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for CompactSegment")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *proto.SegmentMetadata); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStore_CompactSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompactSegment'
type LogStore_CompactSegment_Call struct {
	*mock.Call
}

// CompactSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStore_Expecter) CompactSegment(ctx interface{}, logId interface{}, segmentId interface{}) *LogStore_CompactSegment_Call {
	return &LogStore_CompactSegment_Call{Call: _e.mock.On("CompactSegment", ctx, logId, segmentId)}
}

func (_c *LogStore_CompactSegment_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStore_CompactSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStore_CompactSegment_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *LogStore_CompactSegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStore_CompactSegment_Call) RunAndReturn(run func(context.Context, int64, int64) (*proto.SegmentMetadata, error)) *LogStore_CompactSegment_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteSegment provides a mock function with given fields: ctx, logId, segmentId, lac
func (_m *LogStore) CompleteSegment(ctx context.Context, logId int64, segmentId int64, lac int64) (int64, error) {
	ret := _m.Called(ctx, logId, segmentId, lac)

	if len(ret) == 0 {
		panic("no return value specified for CompleteSegment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) (int64, error)); ok {
		return rf(ctx, logId, segmentId, lac)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) int64); ok {
		r0 = rf(ctx, logId, segmentId, lac)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId, lac)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStore_CompleteSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteSegment'
type LogStore_CompleteSegment_Call struct {
	*mock.Call
}

// CompleteSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
//   - lac int64
func (_e *LogStore_Expecter) CompleteSegment(ctx interface{}, logId interface{}, segmentId interface{}, lac interface{}) *LogStore_CompleteSegment_Call {
	return &LogStore_CompleteSegment_Call{Call: _e.mock.On("CompleteSegment", ctx, logId, segmentId, lac)}
}

func (_c *LogStore_CompleteSegment_Call) Run(run func(ctx context.Context, logId int64, segmentId int64, lac int64)) *LogStore_CompleteSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *LogStore_CompleteSegment_Call) Return(_a0 int64, _a1 error) *LogStore_CompleteSegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStore_CompleteSegment_Call) RunAndReturn(run func(context.Context, int64, int64, int64) (int64, error)) *LogStore_CompleteSegment_Call {
	_c.Call.Return(run)
	return _c
}

// FenceSegment provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStore) FenceSegment(ctx context.Context, logId int64, segmentId int64) (int64, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for FenceSegment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (int64, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) int64); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStore_FenceSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FenceSegment'
type LogStore_FenceSegment_Call struct {
	*mock.Call
}

// FenceSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStore_Expecter) FenceSegment(ctx interface{}, logId interface{}, segmentId interface{}) *LogStore_FenceSegment_Call {
	return &LogStore_FenceSegment_Call{Call: _e.mock.On("FenceSegment", ctx, logId, segmentId)}
}

func (_c *LogStore_FenceSegment_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStore_FenceSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStore_FenceSegment_Call) Return(_a0 int64, _a1 error) *LogStore_FenceSegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStore_FenceSegment_Call) RunAndReturn(run func(context.Context, int64, int64) (int64, error)) *LogStore_FenceSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddress provides a mock function with no fields
func (_m *LogStore) GetAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogStore_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type LogStore_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *LogStore_Expecter) GetAddress() *LogStore_GetAddress_Call {
	return &LogStore_GetAddress_Call{Call: _e.mock.On("GetAddress")}
}

func (_c *LogStore_GetAddress_Call) Run(run func()) *LogStore_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogStore_GetAddress_Call) Return(_a0 string) *LogStore_GetAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStore_GetAddress_Call) RunAndReturn(run func() string) *LogStore_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetBatchEntriesAdv provides a mock function with given fields: ctx, logId, segmentId, fromEntryId, maxEntries, lastReadState
func (_m *LogStore) GetBatchEntriesAdv(ctx context.Context, logId int64, segmentId int64, fromEntryId int64, maxEntries int64, lastReadState *proto.LastReadState) (*proto.BatchReadResult, error) {
	ret := _m.Called(ctx, logId, segmentId, fromEntryId, maxEntries, lastReadState)

	if len(ret) == 0 {
		panic("no return value specified for GetBatchEntriesAdv")
	}

	var r0 *proto.BatchReadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, int64, *proto.LastReadState) (*proto.BatchReadResult, error)); ok {
		return rf(ctx, logId, segmentId, fromEntryId, maxEntries, lastReadState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, int64, *proto.LastReadState) *proto.BatchReadResult); ok {
		r0 = rf(ctx, logId, segmentId, fromEntryId, maxEntries, lastReadState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BatchReadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, int64, *proto.LastReadState) error); ok {
		r1 = rf(ctx, logId, segmentId, fromEntryId, maxEntries, lastReadState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStore_GetBatchEntriesAdv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatchEntriesAdv'
type LogStore_GetBatchEntriesAdv_Call struct {
	*mock.Call
}

// GetBatchEntriesAdv is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
//   - fromEntryId int64
//   - maxEntries int64
//   - lastReadState *proto.LastReadState
func (_e *LogStore_Expecter) GetBatchEntriesAdv(ctx interface{}, logId interface{}, segmentId interface{}, fromEntryId interface{}, maxEntries interface{}, lastReadState interface{}) *LogStore_GetBatchEntriesAdv_Call {
	return &LogStore_GetBatchEntriesAdv_Call{Call: _e.mock.On("GetBatchEntriesAdv", ctx, logId, segmentId, fromEntryId, maxEntries, lastReadState)}
}

func (_c *LogStore_GetBatchEntriesAdv_Call) Run(run func(ctx context.Context, logId int64, segmentId int64, fromEntryId int64, maxEntries int64, lastReadState *proto.LastReadState)) *LogStore_GetBatchEntriesAdv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(int64), args[5].(*proto.LastReadState))
	})
	return _c
}

func (_c *LogStore_GetBatchEntriesAdv_Call) Return(_a0 *proto.BatchReadResult, _a1 error) *LogStore_GetBatchEntriesAdv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStore_GetBatchEntriesAdv_Call) RunAndReturn(run func(context.Context, int64, int64, int64, int64, *proto.LastReadState) (*proto.BatchReadResult, error)) *LogStore_GetBatchEntriesAdv_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentBlockCount provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStore) GetSegmentBlockCount(ctx context.Context, logId int64, segmentId int64) (int64, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentBlockCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (int64, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) int64); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStore_GetSegmentBlockCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentBlockCount'
type LogStore_GetSegmentBlockCount_Call struct {
	*mock.Call
}

// GetSegmentBlockCount is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStore_Expecter) GetSegmentBlockCount(ctx interface{}, logId interface{}, segmentId interface{}) *LogStore_GetSegmentBlockCount_Call {
	return &LogStore_GetSegmentBlockCount_Call{Call: _e.mock.On("GetSegmentBlockCount", ctx, logId, segmentId)}
}

func (_c *LogStore_GetSegmentBlockCount_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStore_GetSegmentBlockCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStore_GetSegmentBlockCount_Call) Return(_a0 int64, _a1 error) *LogStore_GetSegmentBlockCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStore_GetSegmentBlockCount_Call) RunAndReturn(run func(context.Context, int64, int64) (int64, error)) *LogStore_GetSegmentBlockCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentLastAddConfirmed provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStore) GetSegmentLastAddConfirmed(ctx context.Context, logId int64, segmentId int64) (int64, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentLastAddConfirmed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (int64, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) int64); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStore_GetSegmentLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentLastAddConfirmed'
type LogStore_GetSegmentLastAddConfirmed_Call struct {
	*mock.Call
}

// GetSegmentLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStore_Expecter) GetSegmentLastAddConfirmed(ctx interface{}, logId interface{}, segmentId interface{}) *LogStore_GetSegmentLastAddConfirmed_Call {
	return &LogStore_GetSegmentLastAddConfirmed_Call{Call: _e.mock.On("GetSegmentLastAddConfirmed", ctx, logId, segmentId)}
}

func (_c *LogStore_GetSegmentLastAddConfirmed_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStore_GetSegmentLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStore_GetSegmentLastAddConfirmed_Call) Return(_a0 int64, _a1 error) *LogStore_GetSegmentLastAddConfirmed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStore_GetSegmentLastAddConfirmed_Call) RunAndReturn(run func(context.Context, int64, int64) (int64, error)) *LogStore_GetSegmentLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// SetAddress provides a mock function with given fields: address
func (_m *LogStore) SetAddress(address string) {
	_m.Called(address)
}

// LogStore_SetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAddress'
type LogStore_SetAddress_Call struct {
	*mock.Call
}

// SetAddress is a helper method to define mock.On call
//   - address string
func (_e *LogStore_Expecter) SetAddress(address interface{}) *LogStore_SetAddress_Call {
	return &LogStore_SetAddress_Call{Call: _e.mock.On("SetAddress", address)}
}

func (_c *LogStore_SetAddress_Call) Run(run func(address string)) *LogStore_SetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LogStore_SetAddress_Call) Return() *LogStore_SetAddress_Call {
	_c.Call.Return()
	return _c
}

func (_c *LogStore_SetAddress_Call) RunAndReturn(run func(string)) *LogStore_SetAddress_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *LogStore) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStore_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type LogStore_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *LogStore_Expecter) Start() *LogStore_Start_Call {
	return &LogStore_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *LogStore_Start_Call) Run(run func()) *LogStore_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogStore_Start_Call) Return(_a0 error) *LogStore_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStore_Start_Call) RunAndReturn(run func() error) *LogStore_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *LogStore) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStore_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type LogStore_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *LogStore_Expecter) Stop() *LogStore_Stop_Call {
	return &LogStore_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *LogStore_Stop_Call) Run(run func()) *LogStore_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogStore_Stop_Call) Return(_a0 error) *LogStore_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStore_Stop_Call) RunAndReturn(run func() error) *LogStore_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastAddConfirmed provides a mock function with given fields: ctx, logId, segmentId, lac
func (_m *LogStore) UpdateLastAddConfirmed(ctx context.Context, logId int64, segmentId int64, lac int64) error {
	ret := _m.Called(ctx, logId, segmentId, lac)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastAddConfirmed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, logId, segmentId, lac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStore_UpdateLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastAddConfirmed'
type LogStore_UpdateLastAddConfirmed_Call struct {
	*mock.Call
}

// UpdateLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
//   - lac int64
func (_e *LogStore_Expecter) UpdateLastAddConfirmed(ctx interface{}, logId interface{}, segmentId interface{}, lac interface{}) *LogStore_UpdateLastAddConfirmed_Call {
	return &LogStore_UpdateLastAddConfirmed_Call{Call: _e.mock.On("UpdateLastAddConfirmed", ctx, logId, segmentId, lac)}
}

func (_c *LogStore_UpdateLastAddConfirmed_Call) Run(run func(ctx context.Context, logId int64, segmentId int64, lac int64)) *LogStore_UpdateLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *LogStore_UpdateLastAddConfirmed_Call) Return(_a0 error) *LogStore_UpdateLastAddConfirmed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStore_UpdateLastAddConfirmed_Call) RunAndReturn(run func(context.Context, int64, int64, int64) error) *LogStore_UpdateLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogStore creates a new instance of LogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogStore {
	mock := &LogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
