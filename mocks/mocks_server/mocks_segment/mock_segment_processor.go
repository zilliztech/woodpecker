// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_segment

import (
	context "context"

	channel "github.com/zilliztech/woodpecker/common/channel"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/zilliztech/woodpecker/proto"
)

// SegmentProcessor is an autogenerated mock type for the SegmentProcessor type
type SegmentProcessor struct {
	mock.Mock
}

type SegmentProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentProcessor) EXPECT() *SegmentProcessor_Expecter {
	return &SegmentProcessor_Expecter{mock: &_m.Mock}
}

// AddEntry provides a mock function with given fields: ctx, entry, resultCh
func (_m *SegmentProcessor) AddEntry(ctx context.Context, entry *proto.LogEntry, resultCh channel.ResultChannel) (int64, error) {
	ret := _m.Called(ctx, entry, resultCh)

	if len(ret) == 0 {
		panic("no return value specified for AddEntry")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogEntry, channel.ResultChannel) (int64, error)); ok {
		return rf(ctx, entry, resultCh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogEntry, channel.ResultChannel) int64); ok {
		r0 = rf(ctx, entry, resultCh)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogEntry, channel.ResultChannel) error); ok {
		r1 = rf(ctx, entry, resultCh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_AddEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntry'
type SegmentProcessor_AddEntry_Call struct {
	*mock.Call
}

// AddEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - entry *proto.LogEntry
//   - resultCh channel.ResultChannel
func (_e *SegmentProcessor_Expecter) AddEntry(ctx interface{}, entry interface{}, resultCh interface{}) *SegmentProcessor_AddEntry_Call {
	return &SegmentProcessor_AddEntry_Call{Call: _e.mock.On("AddEntry", ctx, entry, resultCh)}
}

func (_c *SegmentProcessor_AddEntry_Call) Run(run func(ctx context.Context, entry *proto.LogEntry, resultCh channel.ResultChannel)) *SegmentProcessor_AddEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LogEntry), args[2].(channel.ResultChannel))
	})
	return _c
}

func (_c *SegmentProcessor_AddEntry_Call) Return(_a0 int64, _a1 error) *SegmentProcessor_AddEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_AddEntry_Call) RunAndReturn(run func(context.Context, *proto.LogEntry, channel.ResultChannel) (int64, error)) *SegmentProcessor_AddEntry_Call {
	_c.Call.Return(run)
	return _c
}

// Clean provides a mock function with given fields: ctx, flag
func (_m *SegmentProcessor) Clean(ctx context.Context, flag int) error {
	ret := _m.Called(ctx, flag)

	if len(ret) == 0 {
		panic("no return value specified for Clean")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentProcessor_Clean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clean'
type SegmentProcessor_Clean_Call struct {
	*mock.Call
}

// Clean is a helper method to define mock.On call
//   - ctx context.Context
//   - flag int
func (_e *SegmentProcessor_Expecter) Clean(ctx interface{}, flag interface{}) *SegmentProcessor_Clean_Call {
	return &SegmentProcessor_Clean_Call{Call: _e.mock.On("Clean", ctx, flag)}
}

func (_c *SegmentProcessor_Clean_Call) Run(run func(ctx context.Context, flag int)) *SegmentProcessor_Clean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SegmentProcessor_Clean_Call) Return(_a0 error) *SegmentProcessor_Clean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_Clean_Call) RunAndReturn(run func(context.Context, int) error) *SegmentProcessor_Clean_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *SegmentProcessor) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentProcessor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type SegmentProcessor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) Close(ctx interface{}) *SegmentProcessor_Close_Call {
	return &SegmentProcessor_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *SegmentProcessor_Close_Call) Run(run func(ctx context.Context)) *SegmentProcessor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_Close_Call) Return(_a0 error) *SegmentProcessor_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_Close_Call) RunAndReturn(run func(context.Context) error) *SegmentProcessor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Compact provides a mock function with given fields: ctx
func (_m *SegmentProcessor) Compact(ctx context.Context) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Compact")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *proto.SegmentMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_Compact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compact'
type SegmentProcessor_Compact_Call struct {
	*mock.Call
}

// Compact is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) Compact(ctx interface{}) *SegmentProcessor_Compact_Call {
	return &SegmentProcessor_Compact_Call{Call: _e.mock.On("Compact", ctx)}
}

func (_c *SegmentProcessor_Compact_Call) Run(run func(ctx context.Context)) *SegmentProcessor_Compact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_Compact_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *SegmentProcessor_Compact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_Compact_Call) RunAndReturn(run func(context.Context) (*proto.SegmentMetadata, error)) *SegmentProcessor_Compact_Call {
	_c.Call.Return(run)
	return _c
}

// Complete provides a mock function with given fields: ctx, lac
func (_m *SegmentProcessor) Complete(ctx context.Context, lac int64) (int64, error) {
	ret := _m.Called(ctx, lac)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, lac)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, lac)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, lac)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type SegmentProcessor_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - ctx context.Context
//   - lac int64
func (_e *SegmentProcessor_Expecter) Complete(ctx interface{}, lac interface{}) *SegmentProcessor_Complete_Call {
	return &SegmentProcessor_Complete_Call{Call: _e.mock.On("Complete", ctx, lac)}
}

func (_c *SegmentProcessor_Complete_Call) Run(run func(ctx context.Context, lac int64)) *SegmentProcessor_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *SegmentProcessor_Complete_Call) Return(_a0 int64, _a1 error) *SegmentProcessor_Complete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_Complete_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *SegmentProcessor_Complete_Call {
	_c.Call.Return(run)
	return _c
}

// Fence provides a mock function with given fields: ctx
func (_m *SegmentProcessor) Fence(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fence")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_Fence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fence'
type SegmentProcessor_Fence_Call struct {
	*mock.Call
}

// Fence is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) Fence(ctx interface{}) *SegmentProcessor_Fence_Call {
	return &SegmentProcessor_Fence_Call{Call: _e.mock.On("Fence", ctx)}
}

func (_c *SegmentProcessor_Fence_Call) Run(run func(ctx context.Context)) *SegmentProcessor_Fence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_Fence_Call) Return(_a0 int64, _a1 error) *SegmentProcessor_Fence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_Fence_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentProcessor_Fence_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocksCount provides a mock function with given fields: ctx
func (_m *SegmentProcessor) GetBlocksCount(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocksCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_GetBlocksCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocksCount'
type SegmentProcessor_GetBlocksCount_Call struct {
	*mock.Call
}

// GetBlocksCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) GetBlocksCount(ctx interface{}) *SegmentProcessor_GetBlocksCount_Call {
	return &SegmentProcessor_GetBlocksCount_Call{Call: _e.mock.On("GetBlocksCount", ctx)}
}

func (_c *SegmentProcessor_GetBlocksCount_Call) Run(run func(ctx context.Context)) *SegmentProcessor_GetBlocksCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_GetBlocksCount_Call) Return(_a0 int64, _a1 error) *SegmentProcessor_GetBlocksCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_GetBlocksCount_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentProcessor_GetBlocksCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastAccessTime provides a mock function with no fields
func (_m *SegmentProcessor) GetLastAccessTime() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastAccessTime")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentProcessor_GetLastAccessTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastAccessTime'
type SegmentProcessor_GetLastAccessTime_Call struct {
	*mock.Call
}

// GetLastAccessTime is a helper method to define mock.On call
func (_e *SegmentProcessor_Expecter) GetLastAccessTime() *SegmentProcessor_GetLastAccessTime_Call {
	return &SegmentProcessor_GetLastAccessTime_Call{Call: _e.mock.On("GetLastAccessTime")}
}

func (_c *SegmentProcessor_GetLastAccessTime_Call) Run(run func()) *SegmentProcessor_GetLastAccessTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentProcessor_GetLastAccessTime_Call) Return(_a0 int64) *SegmentProcessor_GetLastAccessTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_GetLastAccessTime_Call) RunAndReturn(run func() int64) *SegmentProcessor_GetLastAccessTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogId provides a mock function with no fields
func (_m *SegmentProcessor) GetLogId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentProcessor_GetLogId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogId'
type SegmentProcessor_GetLogId_Call struct {
	*mock.Call
}

// GetLogId is a helper method to define mock.On call
func (_e *SegmentProcessor_Expecter) GetLogId() *SegmentProcessor_GetLogId_Call {
	return &SegmentProcessor_GetLogId_Call{Call: _e.mock.On("GetLogId")}
}

func (_c *SegmentProcessor_GetLogId_Call) Run(run func()) *SegmentProcessor_GetLogId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentProcessor_GetLogId_Call) Return(_a0 int64) *SegmentProcessor_GetLogId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_GetLogId_Call) RunAndReturn(run func() int64) *SegmentProcessor_GetLogId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentId provides a mock function with no fields
func (_m *SegmentProcessor) GetSegmentId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentProcessor_GetSegmentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentId'
type SegmentProcessor_GetSegmentId_Call struct {
	*mock.Call
}

// GetSegmentId is a helper method to define mock.On call
func (_e *SegmentProcessor_Expecter) GetSegmentId() *SegmentProcessor_GetSegmentId_Call {
	return &SegmentProcessor_GetSegmentId_Call{Call: _e.mock.On("GetSegmentId")}
}

func (_c *SegmentProcessor_GetSegmentId_Call) Run(run func()) *SegmentProcessor_GetSegmentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentProcessor_GetSegmentId_Call) Return(_a0 int64) *SegmentProcessor_GetSegmentId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_GetSegmentId_Call) RunAndReturn(run func() int64) *SegmentProcessor_GetSegmentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentLastAddConfirmed provides a mock function with given fields: ctx
func (_m *SegmentProcessor) GetSegmentLastAddConfirmed(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentLastAddConfirmed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_GetSegmentLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentLastAddConfirmed'
type SegmentProcessor_GetSegmentLastAddConfirmed_Call struct {
	*mock.Call
}

// GetSegmentLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) GetSegmentLastAddConfirmed(ctx interface{}) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	return &SegmentProcessor_GetSegmentLastAddConfirmed_Call{Call: _e.mock.On("GetSegmentLastAddConfirmed", ctx)}
}

func (_c *SegmentProcessor_GetSegmentLastAddConfirmed_Call) Run(run func(ctx context.Context)) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_GetSegmentLastAddConfirmed_Call) Return(_a0 int64, _a1 error) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_GetSegmentLastAddConfirmed_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBatchEntriesAdv provides a mock function with given fields: ctx, fromEntryId, maxEntries, lastReadState
func (_m *SegmentProcessor) ReadBatchEntriesAdv(ctx context.Context, fromEntryId int64, maxEntries int64, lastReadState *proto.LastReadState) (*proto.BatchReadResult, error) {
	ret := _m.Called(ctx, fromEntryId, maxEntries, lastReadState)

	if len(ret) == 0 {
		panic("no return value specified for ReadBatchEntriesAdv")
	}

	var r0 *proto.BatchReadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *proto.LastReadState) (*proto.BatchReadResult, error)); ok {
		return rf(ctx, fromEntryId, maxEntries, lastReadState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *proto.LastReadState) *proto.BatchReadResult); ok {
		r0 = rf(ctx, fromEntryId, maxEntries, lastReadState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BatchReadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, *proto.LastReadState) error); ok {
		r1 = rf(ctx, fromEntryId, maxEntries, lastReadState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_ReadBatchEntriesAdv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBatchEntriesAdv'
type SegmentProcessor_ReadBatchEntriesAdv_Call struct {
	*mock.Call
}

// ReadBatchEntriesAdv is a helper method to define mock.On call
//   - ctx context.Context
//   - fromEntryId int64
//   - maxEntries int64
//   - lastReadState *proto.LastReadState
func (_e *SegmentProcessor_Expecter) ReadBatchEntriesAdv(ctx interface{}, fromEntryId interface{}, maxEntries interface{}, lastReadState interface{}) *SegmentProcessor_ReadBatchEntriesAdv_Call {
	return &SegmentProcessor_ReadBatchEntriesAdv_Call{Call: _e.mock.On("ReadBatchEntriesAdv", ctx, fromEntryId, maxEntries, lastReadState)}
}

func (_c *SegmentProcessor_ReadBatchEntriesAdv_Call) Run(run func(ctx context.Context, fromEntryId int64, maxEntries int64, lastReadState *proto.LastReadState)) *SegmentProcessor_ReadBatchEntriesAdv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(*proto.LastReadState))
	})
	return _c
}

func (_c *SegmentProcessor_ReadBatchEntriesAdv_Call) Return(_a0 *proto.BatchReadResult, _a1 error) *SegmentProcessor_ReadBatchEntriesAdv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_ReadBatchEntriesAdv_Call) RunAndReturn(run func(context.Context, int64, int64, *proto.LastReadState) (*proto.BatchReadResult, error)) *SegmentProcessor_ReadBatchEntriesAdv_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSegmentLastAddConfirmed provides a mock function with given fields: ctx, lac
func (_m *SegmentProcessor) UpdateSegmentLastAddConfirmed(ctx context.Context, lac int64) error {
	ret := _m.Called(ctx, lac)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSegmentLastAddConfirmed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, lac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentProcessor_UpdateSegmentLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSegmentLastAddConfirmed'
type SegmentProcessor_UpdateSegmentLastAddConfirmed_Call struct {
	*mock.Call
}

// UpdateSegmentLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - lac int64
func (_e *SegmentProcessor_Expecter) UpdateSegmentLastAddConfirmed(ctx interface{}, lac interface{}) *SegmentProcessor_UpdateSegmentLastAddConfirmed_Call {
	return &SegmentProcessor_UpdateSegmentLastAddConfirmed_Call{Call: _e.mock.On("UpdateSegmentLastAddConfirmed", ctx, lac)}
}

func (_c *SegmentProcessor_UpdateSegmentLastAddConfirmed_Call) Run(run func(ctx context.Context, lac int64)) *SegmentProcessor_UpdateSegmentLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *SegmentProcessor_UpdateSegmentLastAddConfirmed_Call) Return(_a0 error) *SegmentProcessor_UpdateSegmentLastAddConfirmed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_UpdateSegmentLastAddConfirmed_Call) RunAndReturn(run func(context.Context, int64) error) *SegmentProcessor_UpdateSegmentLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentProcessor creates a new instance of SegmentProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentProcessor {
	mock := &SegmentProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
