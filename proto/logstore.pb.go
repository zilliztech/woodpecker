//*
// LogStore Client

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.2
// source: logstore.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddEntryState int32

const (
	AddEntryState_Buffered AddEntryState = 0
	AddEntryState_Synced   AddEntryState = 1
	AddEntryState_Failed   AddEntryState = 2
)

// Enum value maps for AddEntryState.
var (
	AddEntryState_name = map[int32]string{
		0: "Buffered",
		1: "Synced",
		2: "Failed",
	}
	AddEntryState_value = map[string]int32{
		"Buffered": 0,
		"Synced":   1,
		"Failed":   2,
	}
)

func (x AddEntryState) Enum() *AddEntryState {
	p := new(AddEntryState)
	*p = x
	return p
}

func (x AddEntryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddEntryState) Descriptor() protoreflect.EnumDescriptor {
	return file_logstore_proto_enumTypes[0].Descriptor()
}

func (AddEntryState) Type() protoreflect.EnumType {
	return &file_logstore_proto_enumTypes[0]
}

func (x AddEntryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddEntryState.Descriptor instead.
func (AddEntryState) EnumDescriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{0}
}

// Node selection strategy types
type StrategyType int32

const (
	StrategyType_RANDOM              StrategyType = 0
	StrategyType_SINGLE_AZ_SINGLE_RG StrategyType = 1
	StrategyType_SINGLE_AZ_MULTI_RG  StrategyType = 2
	StrategyType_MULTI_AZ_SINGLE_RG  StrategyType = 3
	StrategyType_MULTI_AZ_MULTI_RG   StrategyType = 4
	StrategyType_CROSS_REGION        StrategyType = 5
	StrategyType_CUSTOM              StrategyType = 6
)

// Enum value maps for StrategyType.
var (
	StrategyType_name = map[int32]string{
		0: "RANDOM",
		1: "SINGLE_AZ_SINGLE_RG",
		2: "SINGLE_AZ_MULTI_RG",
		3: "MULTI_AZ_SINGLE_RG",
		4: "MULTI_AZ_MULTI_RG",
		5: "CROSS_REGION",
		6: "CUSTOM",
	}
	StrategyType_value = map[string]int32{
		"RANDOM":              0,
		"SINGLE_AZ_SINGLE_RG": 1,
		"SINGLE_AZ_MULTI_RG":  2,
		"MULTI_AZ_SINGLE_RG":  3,
		"MULTI_AZ_MULTI_RG":   4,
		"CROSS_REGION":        5,
		"CUSTOM":              6,
	}
)

func (x StrategyType) Enum() *StrategyType {
	p := new(StrategyType)
	*p = x
	return p
}

func (x StrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_logstore_proto_enumTypes[1].Descriptor()
}

func (StrategyType) Type() protoreflect.EnumType {
	return &file_logstore_proto_enumTypes[1]
}

func (x StrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrategyType.Descriptor instead.
func (StrategyType) EnumDescriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{1}
}

// Affinity mode for node selection
type AffinityMode int32

const (
	AffinityMode_SOFT AffinityMode = 0 // Best effort, allow fallback
	AffinityMode_HARD AffinityMode = 1 // Strict requirements, fail if not met
)

// Enum value maps for AffinityMode.
var (
	AffinityMode_name = map[int32]string{
		0: "SOFT",
		1: "HARD",
	}
	AffinityMode_value = map[string]int32{
		"SOFT": 0,
		"HARD": 1,
	}
)

func (x AffinityMode) Enum() *AffinityMode {
	p := new(AffinityMode)
	*p = x
	return p
}

func (x AffinityMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AffinityMode) Descriptor() protoreflect.EnumDescriptor {
	return file_logstore_proto_enumTypes[2].Descriptor()
}

func (AffinityMode) Type() protoreflect.EnumType {
	return &file_logstore_proto_enumTypes[2]
}

func (x AffinityMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AffinityMode.Descriptor instead.
func (AffinityMode) EnumDescriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{2}
}

// *
// Log message data structure
type LogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegId         int64                  `protobuf:"varint,1,opt,name=segId,proto3" json:"segId,omitempty"`
	EntryId       int64                  `protobuf:"varint,2,opt,name=entryId,proto3" json:"entryId,omitempty"`
	Values        []byte                 `protobuf:"bytes,3,opt,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_logstore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{0}
}

func (x *LogEntry) GetSegId() int64 {
	if x != nil {
		return x.SegId
	}
	return 0
}

func (x *LogEntry) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *LogEntry) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type LogMessageIdData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegId         int64                  `protobuf:"varint,1,opt,name=segId,proto3" json:"segId,omitempty"`
	EntryId       int64                  `protobuf:"varint,2,opt,name=entryId,proto3" json:"entryId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMessageIdData) Reset() {
	*x = LogMessageIdData{}
	mi := &file_logstore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessageIdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageIdData) ProtoMessage() {}

func (x *LogMessageIdData) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessageIdData.ProtoReflect.Descriptor instead.
func (*LogMessageIdData) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{1}
}

func (x *LogMessageIdData) GetSegId() int64 {
	if x != nil {
		return x.SegId
	}
	return 0
}

func (x *LogMessageIdData) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

type LogMessageLayout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Properties    map[string]string      `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMessageLayout) Reset() {
	*x = LogMessageLayout{}
	mi := &file_logstore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessageLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageLayout) ProtoMessage() {}

func (x *LogMessageLayout) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessageLayout.ProtoReflect.Descriptor instead.
func (*LogMessageLayout) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{2}
}

func (x *LogMessageLayout) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *LogMessageLayout) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type LastReadState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     int64                  `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Flags         uint32                 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Version       uint32                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	LastBlockId   int32                  `protobuf:"varint,4,opt,name=last_block_id,json=lastBlockId,proto3" json:"last_block_id,omitempty"`
	BlockOffset   int64                  `protobuf:"varint,5,opt,name=block_offset,json=blockOffset,proto3" json:"block_offset,omitempty"`
	BlockSize     uint32                 `protobuf:"varint,6,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Node          string                 `protobuf:"bytes,7,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastReadState) Reset() {
	*x = LastReadState{}
	mi := &file_logstore_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastReadState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastReadState) ProtoMessage() {}

func (x *LastReadState) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastReadState.ProtoReflect.Descriptor instead.
func (*LastReadState) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{3}
}

func (x *LastReadState) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *LastReadState) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *LastReadState) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LastReadState) GetLastBlockId() int32 {
	if x != nil {
		return x.LastBlockId
	}
	return 0
}

func (x *LastReadState) GetBlockOffset() int64 {
	if x != nil {
		return x.BlockOffset
	}
	return 0
}

func (x *LastReadState) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *LastReadState) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type BatchReadResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*LogEntry            `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	LastReadState *LastReadState         `protobuf:"bytes,2,opt,name=lastReadState,proto3" json:"lastReadState,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchReadResult) Reset() {
	*x = BatchReadResult{}
	mi := &file_logstore_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchReadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReadResult) ProtoMessage() {}

func (x *BatchReadResult) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReadResult.ProtoReflect.Descriptor instead.
func (*BatchReadResult) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{4}
}

func (x *BatchReadResult) GetEntries() []*LogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *BatchReadResult) GetLastReadState() *LastReadState {
	if x != nil {
		return x.LastReadState
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Retriable     bool                   `protobuf:"varint,3,opt,name=retriable,proto3" json:"retriable,omitempty"`
	Detail        string                 `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	ExtraInfo     map[string]string      `protobuf:"bytes,5,rep,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_logstore_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{5}
}

func (x *Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetRetriable() bool {
	if x != nil {
		return x.Retriable
	}
	return false
}

func (x *Status) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Status) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type AddEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Entry         *LogEntry              `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddEntryRequest) Reset() {
	*x = AddEntryRequest{}
	mi := &file_logstore_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEntryRequest) ProtoMessage() {}

func (x *AddEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEntryRequest.ProtoReflect.Descriptor instead.
func (*AddEntryRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{6}
}

func (x *AddEntryRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *AddEntryRequest) GetEntry() *LogEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type AddEntryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntryId       int64                  `protobuf:"varint,2,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"` // buffered entry id
	State         AddEntryState          `protobuf:"varint,3,opt,name=state,proto3,enum=woodpecker.proto.logstore.AddEntryState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddEntryResponse) Reset() {
	*x = AddEntryResponse{}
	mi := &file_logstore_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEntryResponse) ProtoMessage() {}

func (x *AddEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEntryResponse.ProtoReflect.Descriptor instead.
func (*AddEntryResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{7}
}

func (x *AddEntryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddEntryResponse) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *AddEntryResponse) GetState() AddEntryState {
	if x != nil {
		return x.State
	}
	return AddEntryState_Buffered
}

// Advanced batch read
type GetBatchEntriesAdvRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId     int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	FromEntryId   int64                  `protobuf:"varint,3,opt,name=from_entry_id,json=fromEntryId,proto3" json:"from_entry_id,omitempty"`
	MaxEntries    int64                  `protobuf:"varint,4,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	LastReadState *LastReadState         `protobuf:"bytes,5,opt,name=last_read_state,json=lastReadState,proto3" json:"last_read_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBatchEntriesAdvRequest) Reset() {
	*x = GetBatchEntriesAdvRequest{}
	mi := &file_logstore_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatchEntriesAdvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchEntriesAdvRequest) ProtoMessage() {}

func (x *GetBatchEntriesAdvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchEntriesAdvRequest.ProtoReflect.Descriptor instead.
func (*GetBatchEntriesAdvRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{8}
}

func (x *GetBatchEntriesAdvRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *GetBatchEntriesAdvRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *GetBatchEntriesAdvRequest) GetFromEntryId() int64 {
	if x != nil {
		return x.FromEntryId
	}
	return 0
}

func (x *GetBatchEntriesAdvRequest) GetMaxEntries() int64 {
	if x != nil {
		return x.MaxEntries
	}
	return 0
}

func (x *GetBatchEntriesAdvRequest) GetLastReadState() *LastReadState {
	if x != nil {
		return x.LastReadState
	}
	return nil
}

type GetBatchEntriesAdvResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result        *BatchReadResult       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBatchEntriesAdvResponse) Reset() {
	*x = GetBatchEntriesAdvResponse{}
	mi := &file_logstore_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatchEntriesAdvResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchEntriesAdvResponse) ProtoMessage() {}

func (x *GetBatchEntriesAdvResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchEntriesAdvResponse.ProtoReflect.Descriptor instead.
func (*GetBatchEntriesAdvResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{9}
}

func (x *GetBatchEntriesAdvResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetBatchEntriesAdvResponse) GetResult() *BatchReadResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// Segment state transitions
type FenceSegmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId     int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FenceSegmentRequest) Reset() {
	*x = FenceSegmentRequest{}
	mi := &file_logstore_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FenceSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenceSegmentRequest) ProtoMessage() {}

func (x *FenceSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenceSegmentRequest.ProtoReflect.Descriptor instead.
func (*FenceSegmentRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{10}
}

func (x *FenceSegmentRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *FenceSegmentRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type FenceSegmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LastEntryId   int64                  `protobuf:"varint,2,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FenceSegmentResponse) Reset() {
	*x = FenceSegmentResponse{}
	mi := &file_logstore_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FenceSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenceSegmentResponse) ProtoMessage() {}

func (x *FenceSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenceSegmentResponse.ProtoReflect.Descriptor instead.
func (*FenceSegmentResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{11}
}

func (x *FenceSegmentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FenceSegmentResponse) GetLastEntryId() int64 {
	if x != nil {
		return x.LastEntryId
	}
	return 0
}

type CompleteSegmentRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LogId            int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId        int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	LastAddConfirmed int64                  `protobuf:"varint,3,opt,name=last_add_confirmed,json=lastAddConfirmed,proto3" json:"last_add_confirmed,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CompleteSegmentRequest) Reset() {
	*x = CompleteSegmentRequest{}
	mi := &file_logstore_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteSegmentRequest) ProtoMessage() {}

func (x *CompleteSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteSegmentRequest.ProtoReflect.Descriptor instead.
func (*CompleteSegmentRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{12}
}

func (x *CompleteSegmentRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *CompleteSegmentRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *CompleteSegmentRequest) GetLastAddConfirmed() int64 {
	if x != nil {
		return x.LastAddConfirmed
	}
	return 0
}

type CompleteSegmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LastEntryId   int64                  `protobuf:"varint,2,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteSegmentResponse) Reset() {
	*x = CompleteSegmentResponse{}
	mi := &file_logstore_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteSegmentResponse) ProtoMessage() {}

func (x *CompleteSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteSegmentResponse.ProtoReflect.Descriptor instead.
func (*CompleteSegmentResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{13}
}

func (x *CompleteSegmentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CompleteSegmentResponse) GetLastEntryId() int64 {
	if x != nil {
		return x.LastEntryId
	}
	return 0
}

type CompactSegmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId     int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompactSegmentRequest) Reset() {
	*x = CompactSegmentRequest{}
	mi := &file_logstore_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompactSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactSegmentRequest) ProtoMessage() {}

func (x *CompactSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactSegmentRequest.ProtoReflect.Descriptor instead.
func (*CompactSegmentRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{14}
}

func (x *CompactSegmentRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *CompactSegmentRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type CompactSegmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metadata      *SegmentMetadata       `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompactSegmentResponse) Reset() {
	*x = CompactSegmentResponse{}
	mi := &file_logstore_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompactSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactSegmentResponse) ProtoMessage() {}

func (x *CompactSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactSegmentResponse.ProtoReflect.Descriptor instead.
func (*CompactSegmentResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{15}
}

func (x *CompactSegmentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CompactSegmentResponse) GetMetadata() *SegmentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Segment introspection
type GetSegmentLastAddConfirmedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId     int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSegmentLastAddConfirmedRequest) Reset() {
	*x = GetSegmentLastAddConfirmedRequest{}
	mi := &file_logstore_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSegmentLastAddConfirmedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentLastAddConfirmedRequest) ProtoMessage() {}

func (x *GetSegmentLastAddConfirmedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentLastAddConfirmedRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentLastAddConfirmedRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{16}
}

func (x *GetSegmentLastAddConfirmedRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *GetSegmentLastAddConfirmedRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type GetSegmentLastAddConfirmedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LastEntryId   int64                  `protobuf:"varint,2,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSegmentLastAddConfirmedResponse) Reset() {
	*x = GetSegmentLastAddConfirmedResponse{}
	mi := &file_logstore_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSegmentLastAddConfirmedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentLastAddConfirmedResponse) ProtoMessage() {}

func (x *GetSegmentLastAddConfirmedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentLastAddConfirmedResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentLastAddConfirmedResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{17}
}

func (x *GetSegmentLastAddConfirmedResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSegmentLastAddConfirmedResponse) GetLastEntryId() int64 {
	if x != nil {
		return x.LastEntryId
	}
	return 0
}

type GetSegmentBlockCountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId     int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSegmentBlockCountRequest) Reset() {
	*x = GetSegmentBlockCountRequest{}
	mi := &file_logstore_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSegmentBlockCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentBlockCountRequest) ProtoMessage() {}

func (x *GetSegmentBlockCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentBlockCountRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentBlockCountRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{18}
}

func (x *GetSegmentBlockCountRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *GetSegmentBlockCountRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type GetSegmentBlockCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BlockCount    int64                  `protobuf:"varint,2,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSegmentBlockCountResponse) Reset() {
	*x = GetSegmentBlockCountResponse{}
	mi := &file_logstore_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSegmentBlockCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentBlockCountResponse) ProtoMessage() {}

func (x *GetSegmentBlockCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentBlockCountResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentBlockCountResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{19}
}

func (x *GetSegmentBlockCountResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSegmentBlockCountResponse) GetBlockCount() int64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

// Maintenance
type CleanSegmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId     int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Flag          int32                  `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanSegmentRequest) Reset() {
	*x = CleanSegmentRequest{}
	mi := &file_logstore_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanSegmentRequest) ProtoMessage() {}

func (x *CleanSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanSegmentRequest.ProtoReflect.Descriptor instead.
func (*CleanSegmentRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{20}
}

func (x *CleanSegmentRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *CleanSegmentRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *CleanSegmentRequest) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type CleanSegmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanSegmentResponse) Reset() {
	*x = CleanSegmentResponse{}
	mi := &file_logstore_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanSegmentResponse) ProtoMessage() {}

func (x *CleanSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanSegmentResponse.ProtoReflect.Descriptor instead.
func (*CleanSegmentResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{21}
}

func (x *CleanSegmentResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Subscribe append results
type AppendResultsSubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendResultsSubscribeRequest) Reset() {
	*x = AppendResultsSubscribeRequest{}
	mi := &file_logstore_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendResultsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendResultsSubscribeRequest) ProtoMessage() {}

func (x *AppendResultsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendResultsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*AppendResultsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{22}
}

func (x *AppendResultsSubscribeRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

// One append result update event
type AppendResultUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogId         int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId     int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	EntryId       int64                  `protobuf:"varint,3,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	Status        *Status                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendResultUpdate) Reset() {
	*x = AppendResultUpdate{}
	mi := &file_logstore_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendResultUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendResultUpdate) ProtoMessage() {}

func (x *AppendResultUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendResultUpdate.ProtoReflect.Descriptor instead.
func (*AppendResultUpdate) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{23}
}

func (x *AppendResultUpdate) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *AppendResultUpdate) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *AppendResultUpdate) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *AppendResultUpdate) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateLastAddConfirmedRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LogId            int64                  `protobuf:"varint,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	SegmentId        int64                  `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	LastAddConfirmed int64                  `protobuf:"varint,3,opt,name=last_add_confirmed,json=lastAddConfirmed,proto3" json:"last_add_confirmed,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateLastAddConfirmedRequest) Reset() {
	*x = UpdateLastAddConfirmedRequest{}
	mi := &file_logstore_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLastAddConfirmedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLastAddConfirmedRequest) ProtoMessage() {}

func (x *UpdateLastAddConfirmedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLastAddConfirmedRequest.ProtoReflect.Descriptor instead.
func (*UpdateLastAddConfirmedRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateLastAddConfirmedRequest) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *UpdateLastAddConfirmedRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *UpdateLastAddConfirmedRequest) GetLastAddConfirmed() int64 {
	if x != nil {
		return x.LastAddConfirmed
	}
	return 0
}

type UpdateLastAddConfirmedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLastAddConfirmedResponse) Reset() {
	*x = UpdateLastAddConfirmedResponse{}
	mi := &file_logstore_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLastAddConfirmedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLastAddConfirmedResponse) ProtoMessage() {}

func (x *UpdateLastAddConfirmedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLastAddConfirmedResponse.ProtoReflect.Descriptor instead.
func (*UpdateLastAddConfirmedResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateLastAddConfirmedResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Node meta information
type NodeMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ResourceGroup string                 `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Az            string                 `protobuf:"bytes,3,opt,name=az,proto3" json:"az,omitempty"`
	Endpoint      string                 `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Version       int64                  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	LastUpdate    int64                  `protobuf:"varint,7,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"` // Unix timestamp in milliseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeMeta) Reset() {
	*x = NodeMeta{}
	mi := &file_logstore_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMeta) ProtoMessage() {}

func (x *NodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMeta.ProtoReflect.Descriptor instead.
func (*NodeMeta) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{26}
}

func (x *NodeMeta) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeMeta) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *NodeMeta) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *NodeMeta) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *NodeMeta) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NodeMeta) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NodeMeta) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

// Node filter criteria for selecting servers
type NodeFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Az            string                 `protobuf:"bytes,1,opt,name=az,proto3" json:"az,omitempty"`                                                                               // Filter by availability zone (supports regex)
	ResourceGroup string                 `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`                                    // Filter by resource group (supports regex)
	Tags          map[string]string      `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Filter by tags (exact match)
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`                                                                        // Limit the number of returned servers (0 = no limit)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeFilter) Reset() {
	*x = NodeFilter{}
	mi := &file_logstore_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeFilter) ProtoMessage() {}

func (x *NodeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeFilter.ProtoReflect.Descriptor instead.
func (*NodeFilter) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{27}
}

func (x *NodeFilter) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *NodeFilter) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *NodeFilter) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NodeFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Select nodes request
type SelectNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Strategy      StrategyType           `protobuf:"varint,1,opt,name=strategy,proto3,enum=woodpecker.proto.logstore.StrategyType" json:"strategy,omitempty"`                             // Node selection strategy
	AffinityMode  AffinityMode           `protobuf:"varint,2,opt,name=affinity_mode,json=affinityMode,proto3,enum=woodpecker.proto.logstore.AffinityMode" json:"affinity_mode,omitempty"` // Affinity mode (soft/hard)
	Filters       []*NodeFilter          `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`                                                                            // Node filter criteria
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectNodesRequest) Reset() {
	*x = SelectNodesRequest{}
	mi := &file_logstore_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectNodesRequest) ProtoMessage() {}

func (x *SelectNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectNodesRequest.ProtoReflect.Descriptor instead.
func (*SelectNodesRequest) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{28}
}

func (x *SelectNodesRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_RANDOM
}

func (x *SelectNodesRequest) GetAffinityMode() AffinityMode {
	if x != nil {
		return x.AffinityMode
	}
	return AffinityMode_SOFT
}

func (x *SelectNodesRequest) GetFilters() []*NodeFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Select nodes response
type SelectNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Nodes         []*NodeMeta            `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // Total number of nodes matching the filter (before limit)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectNodesResponse) Reset() {
	*x = SelectNodesResponse{}
	mi := &file_logstore_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectNodesResponse) ProtoMessage() {}

func (x *SelectNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logstore_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectNodesResponse.ProtoReflect.Descriptor instead.
func (*SelectNodesResponse) Descriptor() ([]byte, []int) {
	return file_logstore_proto_rawDescGZIP(), []int{29}
}

func (x *SelectNodesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SelectNodesResponse) GetNodes() []*NodeMeta {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *SelectNodesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_logstore_proto protoreflect.FileDescriptor

var file_logstore_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x0a, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x10, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x65, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x65, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22,
	0xc8, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5b,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x6f, 0x6f,
	0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x6f, 0x6f, 0x64,
	0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x64, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x41, 0x64, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x6f, 0x6f, 0x64,
	0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4b, 0x0a,
	0x13, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x14, 0x46, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22,
	0x78, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6f,
	0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x59, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x51, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64,
	0x22, 0xa0, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f,
	0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x61, 0x7a, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x61, 0x7a, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x43, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x6f, 0x6f,
	0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe8, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x6f, 0x64,
	0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x4c, 0x0a, 0x0d,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x6f,
	0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x35, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x2a, 0x98, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x41, 0x5a, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x52, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x41, 0x5a, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x52, 0x47, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x41, 0x5a, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x52, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x41, 0x5a, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x52, 0x47, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x06, 0x2a, 0x22, 0x0a, 0x0c,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x4f, 0x46, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x32, 0xec, 0x09, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x65, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x77, 0x6f, 0x6f, 0x64,
	0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x64, 0x76, 0x12, 0x34, 0x2e, 0x77, 0x6f,
	0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x64, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x64, 0x76,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x46, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x77,
	0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x3c, 0x2e, 0x77, 0x6f, 0x6f, 0x64,
	0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x36, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8d, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x38, 0x2e, 0x77, 0x6f,
	0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x2d, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69,
	0x6c, 0x6c, 0x69, 0x7a, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_logstore_proto_rawDescOnce sync.Once
	file_logstore_proto_rawDescData = file_logstore_proto_rawDesc
)

func file_logstore_proto_rawDescGZIP() []byte {
	file_logstore_proto_rawDescOnce.Do(func() {
		file_logstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_logstore_proto_rawDescData)
	})
	return file_logstore_proto_rawDescData
}

var file_logstore_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_logstore_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_logstore_proto_goTypes = []any{
	(AddEntryState)(0),                         // 0: woodpecker.proto.logstore.AddEntryState
	(StrategyType)(0),                          // 1: woodpecker.proto.logstore.StrategyType
	(AffinityMode)(0),                          // 2: woodpecker.proto.logstore.AffinityMode
	(*LogEntry)(nil),                           // 3: woodpecker.proto.logstore.LogEntry
	(*LogMessageIdData)(nil),                   // 4: woodpecker.proto.logstore.LogMessageIdData
	(*LogMessageLayout)(nil),                   // 5: woodpecker.proto.logstore.LogMessageLayout
	(*LastReadState)(nil),                      // 6: woodpecker.proto.logstore.LastReadState
	(*BatchReadResult)(nil),                    // 7: woodpecker.proto.logstore.BatchReadResult
	(*Status)(nil),                             // 8: woodpecker.proto.logstore.Status
	(*AddEntryRequest)(nil),                    // 9: woodpecker.proto.logstore.AddEntryRequest
	(*AddEntryResponse)(nil),                   // 10: woodpecker.proto.logstore.AddEntryResponse
	(*GetBatchEntriesAdvRequest)(nil),          // 11: woodpecker.proto.logstore.GetBatchEntriesAdvRequest
	(*GetBatchEntriesAdvResponse)(nil),         // 12: woodpecker.proto.logstore.GetBatchEntriesAdvResponse
	(*FenceSegmentRequest)(nil),                // 13: woodpecker.proto.logstore.FenceSegmentRequest
	(*FenceSegmentResponse)(nil),               // 14: woodpecker.proto.logstore.FenceSegmentResponse
	(*CompleteSegmentRequest)(nil),             // 15: woodpecker.proto.logstore.CompleteSegmentRequest
	(*CompleteSegmentResponse)(nil),            // 16: woodpecker.proto.logstore.CompleteSegmentResponse
	(*CompactSegmentRequest)(nil),              // 17: woodpecker.proto.logstore.CompactSegmentRequest
	(*CompactSegmentResponse)(nil),             // 18: woodpecker.proto.logstore.CompactSegmentResponse
	(*GetSegmentLastAddConfirmedRequest)(nil),  // 19: woodpecker.proto.logstore.GetSegmentLastAddConfirmedRequest
	(*GetSegmentLastAddConfirmedResponse)(nil), // 20: woodpecker.proto.logstore.GetSegmentLastAddConfirmedResponse
	(*GetSegmentBlockCountRequest)(nil),        // 21: woodpecker.proto.logstore.GetSegmentBlockCountRequest
	(*GetSegmentBlockCountResponse)(nil),       // 22: woodpecker.proto.logstore.GetSegmentBlockCountResponse
	(*CleanSegmentRequest)(nil),                // 23: woodpecker.proto.logstore.CleanSegmentRequest
	(*CleanSegmentResponse)(nil),               // 24: woodpecker.proto.logstore.CleanSegmentResponse
	(*AppendResultsSubscribeRequest)(nil),      // 25: woodpecker.proto.logstore.AppendResultsSubscribeRequest
	(*AppendResultUpdate)(nil),                 // 26: woodpecker.proto.logstore.AppendResultUpdate
	(*UpdateLastAddConfirmedRequest)(nil),      // 27: woodpecker.proto.logstore.UpdateLastAddConfirmedRequest
	(*UpdateLastAddConfirmedResponse)(nil),     // 28: woodpecker.proto.logstore.UpdateLastAddConfirmedResponse
	(*NodeMeta)(nil),                           // 29: woodpecker.proto.logstore.NodeMeta
	(*NodeFilter)(nil),                         // 30: woodpecker.proto.logstore.NodeFilter
	(*SelectNodesRequest)(nil),                 // 31: woodpecker.proto.logstore.SelectNodesRequest
	(*SelectNodesResponse)(nil),                // 32: woodpecker.proto.logstore.SelectNodesResponse
	nil,                                        // 33: woodpecker.proto.logstore.LogMessageLayout.PropertiesEntry
	nil,                                        // 34: woodpecker.proto.logstore.Status.ExtraInfoEntry
	nil,                                        // 35: woodpecker.proto.logstore.NodeMeta.TagsEntry
	nil,                                        // 36: woodpecker.proto.logstore.NodeFilter.TagsEntry
	(*SegmentMetadata)(nil),                    // 37: woodpecker.proto.meta.SegmentMetadata
}
var file_logstore_proto_depIdxs = []int32{
	33, // 0: woodpecker.proto.logstore.LogMessageLayout.properties:type_name -> woodpecker.proto.logstore.LogMessageLayout.PropertiesEntry
	3,  // 1: woodpecker.proto.logstore.BatchReadResult.entries:type_name -> woodpecker.proto.logstore.LogEntry
	6,  // 2: woodpecker.proto.logstore.BatchReadResult.lastReadState:type_name -> woodpecker.proto.logstore.LastReadState
	34, // 3: woodpecker.proto.logstore.Status.extra_info:type_name -> woodpecker.proto.logstore.Status.ExtraInfoEntry
	3,  // 4: woodpecker.proto.logstore.AddEntryRequest.entry:type_name -> woodpecker.proto.logstore.LogEntry
	8,  // 5: woodpecker.proto.logstore.AddEntryResponse.status:type_name -> woodpecker.proto.logstore.Status
	0,  // 6: woodpecker.proto.logstore.AddEntryResponse.state:type_name -> woodpecker.proto.logstore.AddEntryState
	6,  // 7: woodpecker.proto.logstore.GetBatchEntriesAdvRequest.last_read_state:type_name -> woodpecker.proto.logstore.LastReadState
	8,  // 8: woodpecker.proto.logstore.GetBatchEntriesAdvResponse.status:type_name -> woodpecker.proto.logstore.Status
	7,  // 9: woodpecker.proto.logstore.GetBatchEntriesAdvResponse.result:type_name -> woodpecker.proto.logstore.BatchReadResult
	8,  // 10: woodpecker.proto.logstore.FenceSegmentResponse.status:type_name -> woodpecker.proto.logstore.Status
	8,  // 11: woodpecker.proto.logstore.CompleteSegmentResponse.status:type_name -> woodpecker.proto.logstore.Status
	8,  // 12: woodpecker.proto.logstore.CompactSegmentResponse.status:type_name -> woodpecker.proto.logstore.Status
	37, // 13: woodpecker.proto.logstore.CompactSegmentResponse.metadata:type_name -> woodpecker.proto.meta.SegmentMetadata
	8,  // 14: woodpecker.proto.logstore.GetSegmentLastAddConfirmedResponse.status:type_name -> woodpecker.proto.logstore.Status
	8,  // 15: woodpecker.proto.logstore.GetSegmentBlockCountResponse.status:type_name -> woodpecker.proto.logstore.Status
	8,  // 16: woodpecker.proto.logstore.CleanSegmentResponse.status:type_name -> woodpecker.proto.logstore.Status
	8,  // 17: woodpecker.proto.logstore.AppendResultUpdate.status:type_name -> woodpecker.proto.logstore.Status
	8,  // 18: woodpecker.proto.logstore.UpdateLastAddConfirmedResponse.status:type_name -> woodpecker.proto.logstore.Status
	35, // 19: woodpecker.proto.logstore.NodeMeta.tags:type_name -> woodpecker.proto.logstore.NodeMeta.TagsEntry
	36, // 20: woodpecker.proto.logstore.NodeFilter.tags:type_name -> woodpecker.proto.logstore.NodeFilter.TagsEntry
	1,  // 21: woodpecker.proto.logstore.SelectNodesRequest.strategy:type_name -> woodpecker.proto.logstore.StrategyType
	2,  // 22: woodpecker.proto.logstore.SelectNodesRequest.affinity_mode:type_name -> woodpecker.proto.logstore.AffinityMode
	30, // 23: woodpecker.proto.logstore.SelectNodesRequest.filters:type_name -> woodpecker.proto.logstore.NodeFilter
	8,  // 24: woodpecker.proto.logstore.SelectNodesResponse.status:type_name -> woodpecker.proto.logstore.Status
	29, // 25: woodpecker.proto.logstore.SelectNodesResponse.nodes:type_name -> woodpecker.proto.logstore.NodeMeta
	9,  // 26: woodpecker.proto.logstore.LogStore.AddEntry:input_type -> woodpecker.proto.logstore.AddEntryRequest
	11, // 27: woodpecker.proto.logstore.LogStore.GetBatchEntriesAdv:input_type -> woodpecker.proto.logstore.GetBatchEntriesAdvRequest
	13, // 28: woodpecker.proto.logstore.LogStore.FenceSegment:input_type -> woodpecker.proto.logstore.FenceSegmentRequest
	15, // 29: woodpecker.proto.logstore.LogStore.CompleteSegment:input_type -> woodpecker.proto.logstore.CompleteSegmentRequest
	17, // 30: woodpecker.proto.logstore.LogStore.CompactSegment:input_type -> woodpecker.proto.logstore.CompactSegmentRequest
	19, // 31: woodpecker.proto.logstore.LogStore.GetSegmentLastAddConfirmed:input_type -> woodpecker.proto.logstore.GetSegmentLastAddConfirmedRequest
	21, // 32: woodpecker.proto.logstore.LogStore.GetSegmentBlockCount:input_type -> woodpecker.proto.logstore.GetSegmentBlockCountRequest
	27, // 33: woodpecker.proto.logstore.LogStore.UpdateLastAddConfirmed:input_type -> woodpecker.proto.logstore.UpdateLastAddConfirmedRequest
	23, // 34: woodpecker.proto.logstore.LogStore.CleanSegment:input_type -> woodpecker.proto.logstore.CleanSegmentRequest
	31, // 35: woodpecker.proto.logstore.LogStore.SelectNodes:input_type -> woodpecker.proto.logstore.SelectNodesRequest
	10, // 36: woodpecker.proto.logstore.LogStore.AddEntry:output_type -> woodpecker.proto.logstore.AddEntryResponse
	12, // 37: woodpecker.proto.logstore.LogStore.GetBatchEntriesAdv:output_type -> woodpecker.proto.logstore.GetBatchEntriesAdvResponse
	14, // 38: woodpecker.proto.logstore.LogStore.FenceSegment:output_type -> woodpecker.proto.logstore.FenceSegmentResponse
	16, // 39: woodpecker.proto.logstore.LogStore.CompleteSegment:output_type -> woodpecker.proto.logstore.CompleteSegmentResponse
	18, // 40: woodpecker.proto.logstore.LogStore.CompactSegment:output_type -> woodpecker.proto.logstore.CompactSegmentResponse
	20, // 41: woodpecker.proto.logstore.LogStore.GetSegmentLastAddConfirmed:output_type -> woodpecker.proto.logstore.GetSegmentLastAddConfirmedResponse
	22, // 42: woodpecker.proto.logstore.LogStore.GetSegmentBlockCount:output_type -> woodpecker.proto.logstore.GetSegmentBlockCountResponse
	28, // 43: woodpecker.proto.logstore.LogStore.UpdateLastAddConfirmed:output_type -> woodpecker.proto.logstore.UpdateLastAddConfirmedResponse
	24, // 44: woodpecker.proto.logstore.LogStore.CleanSegment:output_type -> woodpecker.proto.logstore.CleanSegmentResponse
	32, // 45: woodpecker.proto.logstore.LogStore.SelectNodes:output_type -> woodpecker.proto.logstore.SelectNodesResponse
	36, // [36:46] is the sub-list for method output_type
	26, // [26:36] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_logstore_proto_init() }
func file_logstore_proto_init() {
	if File_logstore_proto != nil {
		return
	}
	file_meta_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logstore_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logstore_proto_goTypes,
		DependencyIndexes: file_logstore_proto_depIdxs,
		EnumInfos:         file_logstore_proto_enumTypes,
		MessageInfos:      file_logstore_proto_msgTypes,
	}.Build()
	File_logstore_proto = out.File
	file_logstore_proto_rawDesc = nil
	file_logstore_proto_goTypes = nil
	file_logstore_proto_depIdxs = nil
}
