/**
 * LogStore Client
 */
syntax = "proto3";


package woodpecker.proto.logstore;
option go_package = "github.com/zilliztech/woodpecker/proto";
import "meta.proto";

/**
 * Log message data structure
 */
message LogEntry {
  int64 segId = 1;
  int64 entryId = 2;
  bytes values = 3;
}

message LogMessageIdData{
  int64 segId = 1;
  int64 entryId = 2;
}

message LogMessageLayout{
  bytes payload = 1;
  map<string, string> properties = 2;
}

message LastReadState {
  int64 segment_id = 1;
  uint32 flags = 2;
  uint32 version = 3;
  int32 last_block_id = 4;
  int64 block_offset = 5;
  uint32 block_size = 6;
  string node = 7;
}

message BatchReadResult {
  repeated LogEntry entries = 1;
  LastReadState lastReadState = 2;
}

/**
 * LogStore service.
 *
 * The following RPCs wrap externally callable data-plane operations.
 */
service LogStore {
  // Write APIs
  rpc AddEntry(AddEntryRequest) returns (stream AddEntryResponse);

  // Read APIs
  rpc GetBatchEntriesAdv(GetBatchEntriesAdvRequest) returns (GetBatchEntriesAdvResponse);

  // Segment state transitions
  rpc FenceSegment(FenceSegmentRequest) returns (FenceSegmentResponse);
  rpc CompleteSegment(CompleteSegmentRequest) returns (CompleteSegmentResponse);
  rpc CompactSegment(CompactSegmentRequest) returns (CompactSegmentResponse);

  // Segment introspection
  rpc GetSegmentLastAddConfirmed(GetSegmentLastAddConfirmedRequest) returns (GetSegmentLastAddConfirmedResponse);
  rpc GetSegmentBlockCount(GetSegmentBlockCountRequest) returns (GetSegmentBlockCountResponse);

  rpc UpdateLastAddConfirmed(UpdateLastAddConfirmedRequest) returns (UpdateLastAddConfirmedResponse);

  // Maintenance
  rpc CleanSegment(CleanSegmentRequest) returns (CleanSegmentResponse);
}

message Status {
  string reason = 1;
  int32 code = 2;
  bool retriable = 3;
  string detail = 4;
  map<string, string> extra_info = 5;
}

message AddEntryRequest {
  int64 log_id = 1;
  LogEntry entry = 2;
}

message AddEntryResponse {
  Status status = 1 ;
  int64 entry_id = 2; // buffered entry id
  AddEntryState state = 3;
}

enum AddEntryState {
  Buffered = 0;
  Synced = 1;
  Failed = 2;
}

// Advanced batch read
message GetBatchEntriesAdvRequest {
  int64 log_id = 1;
  int64 segment_id = 2;
  int64 from_entry_id = 3;
  int64 max_entries = 4;
  LastReadState last_read_state = 5;
}

message GetBatchEntriesAdvResponse {
  Status status = 1 ;
  BatchReadResult result = 2;
}


// Segment state transitions
message FenceSegmentRequest {
  int64 log_id = 1;
  int64 segment_id = 2;
}

message FenceSegmentResponse {
  Status status = 1 ;
  int64 last_entry_id = 2;
}

message CompleteSegmentRequest {
  int64 log_id = 1;
  int64 segment_id = 2;
  int64 last_add_confirmed = 3;
}

message CompleteSegmentResponse {
  Status status = 1 ;
  int64 last_entry_id = 2;
}

message CompactSegmentRequest {
  int64 log_id = 1;
  int64 segment_id = 2;
}

message CompactSegmentResponse {
  Status status = 1 ;
  meta.SegmentMetadata metadata = 2;
}

// Segment introspection
message GetSegmentLastAddConfirmedRequest {
  int64 log_id = 1;
  int64 segment_id = 2;
}
message GetSegmentLastAddConfirmedResponse {
  Status status = 1 ;
  int64 last_entry_id = 2;
}

message GetSegmentBlockCountRequest {
  int64 log_id = 1;
  int64 segment_id = 2;
}
message GetSegmentBlockCountResponse {
  Status status = 1 ;
  int64 block_count = 2;
}

// Maintenance
message CleanSegmentRequest {
  int64 log_id = 1;
  int64 segment_id = 2;
  int32 flag = 3;
}
message CleanSegmentResponse {
  Status status = 1 ;
}

// Subscribe append results
message AppendResultsSubscribeRequest {
  int64 log_id = 1;
}

// One append result update event
message AppendResultUpdate {
  int64 log_id = 1;
  int64 segment_id = 2;
  int64 entry_id = 3;
  Status status = 4;
}

message UpdateLastAddConfirmedRequest{
  int64 log_id = 1;
  int64 segment_id = 2;
  int64 last_add_confirmed = 3;
}

message UpdateLastAddConfirmedResponse {
  Status status = 1;
}

